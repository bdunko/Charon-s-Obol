[gd_scene load_steps=270 format=3 uid="uid://bkl5p2djoo52i"]

[ext_resource type="Script" path="res://components/coin.gd" id="1_eg3xp"]
[ext_resource type="Shader" path="res://shaders/shader.gdshader" id="2_14jmd"]
[ext_resource type="Texture2D" uid="uid://b4agtqc74rbqp" path="res://assets/coins/coins_spritesheet.png" id="3_61apl"]
[ext_resource type="Texture2D" uid="uid://b7fxfxpopif5b" path="res://assets/coins/proteus_overlay.png" id="4_5g7if"]
[ext_resource type="Script" path="res://components/face_indicator.gd" id="7_ooodo"]
[ext_resource type="Texture2D" uid="uid://c2jhvysrq3v74" path="res://assets/icons/status/consecrate_icon.png" id="9_g8h0e"]
[ext_resource type="Texture2D" uid="uid://c1loeacx63ofh" path="res://assets/icons/status/doomed_icon.png" id="10_yn4y1"]
[ext_resource type="Texture2D" uid="uid://4qebm4orj3yq" path="res://assets/icons/status/desecrate_icon.png" id="11_s01xa"]
[ext_resource type="PackedScene" uid="uid://d1vri2m1wvvey" path="res://shaders/fx.tscn" id="17_tmr1x"]
[ext_resource type="PackedScene" uid="uid://3cx7lpgelun1" path="res://ui/mouse_watcher.tscn" id="18_x8c4t"]
[ext_resource type="Texture2D" uid="uid://b84mqhr3ieim2" path="res://assets/icons/status/charge_icon.png" id="21_ro1pk"]
[ext_resource type="Script" path="res://components/icon_bar.gd" id="22_i4xsq"]
[ext_resource type="Texture2D" uid="uid://7vswiefodkdx" path="res://assets/icons/status/blank_icon.png" id="23_ndo5s"]
[ext_resource type="Texture2D" uid="uid://cqybe3tyqmixo" path="res://assets/icons/status/bury_icon.png" id="23_noblv"]
[ext_resource type="Script" path="res://ui/tooltip_emitter.gd" id="23_u3o1j"]
[ext_resource type="Texture2D" uid="uid://1yn4ki3gwv2q" path="res://assets/icons/status/stone_icon.png" id="24_gdnx8"]
[ext_resource type="Texture2D" uid="uid://25gl8na8catp" path="res://assets/icons/status/fleeting_icon.png" id="24_qp57l"]
[ext_resource type="Texture2D" uid="uid://cxw40qsgq2x84" path="res://assets/icons/status/bless_icon.png" id="25_7omfm"]
[ext_resource type="Texture2D" uid="uid://cs7vwymqqxirv" path="res://assets/icons/status/primed_icon.png" id="25_xu6eb"]
[ext_resource type="Texture2D" uid="uid://civyowxfl3nuh" path="res://assets/icons/status/curse_icon.png" id="26_o0xd6"]
[ext_resource type="Texture2D" uid="uid://osmuebsyxiq" path="res://assets/icons/status/lucky_icon.png" id="27_ndnpt"]
[ext_resource type="Texture2D" uid="uid://btcqwnxk107vm" path="res://assets/icons/status/unlucky_icon.png" id="28_3niai"]
[ext_resource type="Texture2D" uid="uid://day3rw18o0i16" path="res://assets/icons/status/slightly_lucky_icon.png" id="29_86ey5"]
[ext_resource type="Texture2D" uid="uid://dluf33rxu2gev" path="res://assets/icons/status/freeze_icon.png" id="29_87noc"]
[ext_resource type="Texture2D" uid="uid://cfro5ntt7augh" path="res://assets/icons/status/ignite_icon.png" id="30_s7nly"]
[ext_resource type="Texture2D" uid="uid://bt0dqpg1lqi2a" path="res://assets/icons/status/quite_lucky_icon.png" id="30_wdoi3"]
[ext_resource type="Texture2D" uid="uid://dmf0nbcyfgtng" path="res://assets/icons/status/incredibly_lucky_icon.png" id="31_8habo"]
[ext_resource type="Texture2D" uid="uid://dyc6n3hgf85qd" path="res://assets/icons/status/supercharge_icon.png" id="31_efx5d"]
[ext_resource type="Texture2D" uid="uid://cpi4fvthcwpfc" path="res://assets/icons/heads_icon.png" id="33_byqkj"]
[ext_resource type="Texture2D" uid="uid://bw6cnrxu4imi" path="res://assets/icons/tails_icon.png" id="34_bwsju"]
[ext_resource type="Script" path="res://components/next_flip_indicator.gd" id="35_2vs3w"]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_tte34"]
resource_local_to_scene = true
shader = ExtResource("2_14jmd")
shader_parameter/LABEL = false
shader_parameter/POST_PROCESSING = false
shader_parameter/MOUSE = Vector2(20, 20)
shader_parameter/DISABLE = false
shader_parameter/use_exclude_colors = true
shader_parameter/exclude_color1 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color2 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color3 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color4 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color5 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color6 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color7 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color8 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/displace_x = 0
shader_parameter/displace_y = 0
shader_parameter/displace_repeat = true
shader_parameter/auto_pan_speed = Vector2(0, 0)
shader_parameter/replace_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/replace_with_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/auto_replace_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_replace_original_color = false
shader_parameter/auto_replace_replace_original_color_with = Color(0, 0, 0, 1)
shader_parameter/auto_replace_to_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_speed = 0.0
shader_parameter/auto_replace_start_time = 0.0
shader_parameter/tint_color = Color(0, 0, 0, 1)
shader_parameter/tint_strength = 0.0
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0
shader_parameter/auto_flash_color = Color(1, 1, 1, 1)
shader_parameter/auto_flash_speed = 0.0
shader_parameter/auto_flash_bound1 = 0.0
shader_parameter/auto_flash_bound2 = 1.0
shader_parameter/auto_flash_start_time = 0.0
shader_parameter/red_correct = 0.0
shader_parameter/green_correct = 0.0
shader_parameter/blue_correct = 0.0
shader_parameter/gray_correct = 0.0
shader_parameter/brightness_correct = 1.0
shader_parameter/contrast_correct = 1.0
shader_parameter/saturation_correct = 1.0
shader_parameter/scanline_color = Color(0.98, 0.69, 0.23, 1)
shader_parameter/scanline_strength = 1.0
shader_parameter/scanline_left_to_right_position = -0.001
shader_parameter/scanline_top_to_bottom_position = -0.001
shader_parameter/scanline_topleft_to_bottomright_position = -0.001
shader_parameter/scanline_topright_to_bottomleft_position = -0.001
shader_parameter/auto_scanline_left_to_right_on = false
shader_parameter/auto_scanline_left_to_right_reverse = false
shader_parameter/auto_scanline_left_to_right_start_time = 0.0
shader_parameter/auto_scanline_left_to_right_scan_duration = 0.5
shader_parameter/auto_scanline_left_to_right_delay = 1.0
shader_parameter/auto_scanline_top_to_bottom_on = false
shader_parameter/auto_scanline_top_to_bottom_reverse = false
shader_parameter/auto_scanline_top_to_bottom_start_time = 0.0
shader_parameter/auto_scanline_top_to_bottom_scan_duration = 0.5
shader_parameter/auto_scanline_top_to_bottom_delay = 1.0
shader_parameter/auto_scanline_topleft_to_bottomright_on = false
shader_parameter/auto_scanline_topleft_to_bottomright_reverse = false
shader_parameter/auto_scanline_topleft_to_bottomright_start_time = 0.0
shader_parameter/auto_scanline_topleft_to_bottomright_scan_duration = 0.5
shader_parameter/auto_scanline_topleft_to_bottomright_delay = 1.0
shader_parameter/auto_scanline_topright_to_bottomleft_on = false
shader_parameter/auto_scanline_topright_to_bottomleft_reverse = false
shader_parameter/auto_scanline_topright_to_bottomleft_start_time = 0.0
shader_parameter/auto_scanline_topright_to_bottomleft_scan_duration = 0.5
shader_parameter/auto_scanline_topright_to_bottomleft_delay = 1.0
shader_parameter/glow_color = Color(1, 1, 1, 1)
shader_parameter/glow_thickness = 0
shader_parameter/glow_diagonals = false
shader_parameter/auto_glow_speed = 0.0
shader_parameter/auto_glow_bound = 1.0
shader_parameter/auto_glow_start_time = 0.0
shader_parameter/disintegrate_seed = 1
shader_parameter/disintegrate_color = Color(0, 0, 0, 1)
shader_parameter/disintegrate_strength = 0.0
shader_parameter/disintegrate_alpha_bound1 = 0.0
shader_parameter/disintegrate_alpha_bound2 = 0.0
shader_parameter/disintegrate_as_static = false
shader_parameter/auto_disintegrate_random_seed_speed = 0.0
shader_parameter/fog_enabled = false
shader_parameter/fog_opacity = 0.5
shader_parameter/fog_density = 0.25
shader_parameter/fog_speed = Vector2(0.02, 0.01)
shader_parameter/vertical_colorline_color = Color(1, 1, 1, 1)
shader_parameter/vertical_colorline_spacing = 2
shader_parameter/vertical_colorline_strength = 0.0
shader_parameter/horizontal_colorline_color = Color(1, 1, 1, 1)
shader_parameter/horizontal_colorline_spacing = 2
shader_parameter/horizontal_colorline_strength = 0.0
shader_parameter/checker_color = Color(0.2, 0.2, 0.2, 1)
shader_parameter/checker_strength = 0.0
shader_parameter/checker_x_size = 1
shader_parameter/checker_y_size = 1
shader_parameter/checker_x_pattern = 2
shader_parameter/checker_y_pattern = 2
shader_parameter/checker_contrast_amount = 1.0
shader_parameter/checker_contrast_ratio = 0.5
shader_parameter/mouselight_on = false
shader_parameter/mouselight_color = Color(1, 1, 1, 1)
shader_parameter/mouselight_strength = 0.5
shader_parameter/mouselight_size = 8
shader_parameter/mouselight_soften_edges = true
shader_parameter/mouselight_checker = false
shader_parameter/auto_mouselight_flicker_speed = 10.0
shader_parameter/auto_mouselight_flicker_bound = 3.0
shader_parameter/cut_left = 0.0
shader_parameter/cut_right = 0.0
shader_parameter/cut_top = 0.0
shader_parameter/cut_bottom = 0.0
shader_parameter/vignette_on = false
shader_parameter/vignette_ignore_transparent = false
shader_parameter/vignette_color = Color(0, 0, 0, 1)
shader_parameter/vignette_radius = 1.0
shader_parameter/transparency = 1.0
shader_parameter/auto_flicker_speed = 0.0
shader_parameter/auto_flicker_bound = 0.0
shader_parameter/auto_flicker_start_time = 0.0

[sub_resource type="AtlasTexture" id="AtlasTexture_ebtkx"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_nfym2"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_bh7wp"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6qro4"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_py6hb"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_vqmqx"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ueg74"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fhv50"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rri7e"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_0ts38"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_405ye"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_axi13"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6dgxu"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_bscfj"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kn4w7"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_762i2"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_d60ei"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_4wu7a"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rj25f"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_iuvqs"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6o3ly"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7qe3o"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_be86q"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7m6w8"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_wmtog"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_eifcy"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qddpr"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_wp0fk"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_4wrc3"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_26ptn"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_0e6fw"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_m4nl6"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qbwk6"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_prhqi"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ekfot"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_q8vfh"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_3rryp"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_uldos"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_t5hu1"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5rp2w"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_b5knn"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_h1ckp"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_napai"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_vc8k8"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1eumg"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_hot6r"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_61qg4"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qhunj"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_j4upi"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ylokc"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_yul8s"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kvpu4"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7ddb2"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_b474m"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1x5i6"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xxefo"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_p375u"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1i5tx"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7f580"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_2kxts"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ebvke"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_mas4y"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_lp1jt"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_sh8f5"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ug2d3"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1gthn"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fooon"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_2i0p4"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_t313o"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ht46x"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_dn4xx"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 468, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_v50kh"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7wpkf"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_072lk"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6kti5"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_27306"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 612, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ys1ht"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_88oqu"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_bb62w"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qixhe"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_nj3r7"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 432, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_g34wk"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7qbuc"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_caxp7"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_tdosv"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_r71k3"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 576, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_err4i"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ofsmo"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_re0ta"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7tohs"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_y8nt0"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 540, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_b214j"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_i5mtf"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_m4r1h"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_2g3xq"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ly6aw"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 504, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_l82by"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ogh3r"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_gtppu"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_f8y21"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5xw4q"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_t6oo6"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_bxosa"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_djuw5"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_d1ror"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6f8cu"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 396, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_k2ty4"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_voy3u"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_oebr0"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_jvs8v"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7ln20"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 216, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5a60q"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_shnfu"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qse31"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_cp4ho"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_teu5v"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 360, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qthd5"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 324, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5km65"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 324, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_jin3l"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 324, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kb0k2"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 324, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_evja3"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 324, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_clid7"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 288, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fgqcn"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 288, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_knrtd"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 288, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_loabj"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 288, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_mp4ls"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 288, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rgsvj"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_pagrj"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_qs4o7"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_lvilo"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1ygew"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_q84vp"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_vufnq"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5xoy7"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ax4hc"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5g4t2"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ykntv"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1i8u5"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 252, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_sdli0"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xb8ju"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_hfon8"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fd5ob"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_8qqta"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_4c0hi"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xatqq"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_wmu80"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_gpwr3"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fnn6p"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_q0jie"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_o1lqx"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_845xd"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_2jgji"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xxfua"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_vboku"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_gtgmn"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_68osd"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_4yd2w"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_yju1b"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_lvird"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_3dvs8"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_k41yj"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_yw4rn"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fmp02"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_mbby5"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_r8mr1"]
atlas = ExtResource("3_61apl")
region = Rect2(0, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xthjj"]
atlas = ExtResource("3_61apl")
region = Rect2(34, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_u3k27"]
atlas = ExtResource("3_61apl")
region = Rect2(68, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kraas"]
atlas = ExtResource("3_61apl")
region = Rect2(102, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kgqsw"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_whpkp"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_snmwj"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ka1ls"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_05emt"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_p7vcw"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fatqe"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5qgbc"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6qes6"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_osfn7"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_lrn1j"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_4qtlr"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_n82of"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_kq3l1"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1vh8q"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1p47o"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ijryq"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_yos0u"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_lw8cv"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_70u7g"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_n780r"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_0jp4y"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_er25y"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_x5cim"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ajsbs"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_286b0"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1a42a"]
atlas = ExtResource("3_61apl")
region = Rect2(136, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_renuw"]
atlas = ExtResource("3_61apl")
region = Rect2(170, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_co1c7"]
atlas = ExtResource("3_61apl")
region = Rect2(204, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_n0d26"]
atlas = ExtResource("3_61apl")
region = Rect2(238, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_57o6n"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6beec"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_jtge8"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_xsybm"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_f0sdj"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 36, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_7e5f2"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_5re0o"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_wkt7l"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_3bvoo"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ktpe3"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 180, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_naf2t"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ubtav"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rye05"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_uvl7b"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rnc5o"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 0, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_1dhkj"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_aj057"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_fu6rf"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_pgm0x"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_60frx"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 144, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_yg082"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_h2lhs"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_ulmww"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6swcu"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_aanmg"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 108, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_rcgqk"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_n56qc"]
atlas = ExtResource("3_61apl")
region = Rect2(272, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_crkbb"]
atlas = ExtResource("3_61apl")
region = Rect2(306, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_6p8wl"]
atlas = ExtResource("3_61apl")
region = Rect2(340, 72, 34, 36)

[sub_resource type="AtlasTexture" id="AtlasTexture_sp62t"]
atlas = ExtResource("3_61apl")
region = Rect2(374, 72, 34, 36)

[sub_resource type="SpriteFrames" id="SpriteFrames_w12pp"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ebtkx")
}],
"loop": true,
"name": &"buried",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_nfym2")
}],
"loop": true,
"name": &"charons_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bh7wp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6qro4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_py6hb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vqmqx")
}],
"loop": true,
"name": &"charons_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ueg74")
}],
"loop": true,
"name": &"golden_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fhv50")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rri7e")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0ts38")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_405ye")
}],
"loop": true,
"name": &"golden_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_axi13")
}],
"loop": true,
"name": &"golden_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6dgxu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bscfj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kn4w7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_762i2")
}],
"loop": true,
"name": &"golden_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_d60ei")
}],
"loop": true,
"name": &"golden_numeral_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_4wu7a")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rj25f")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_iuvqs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6o3ly")
}],
"loop": true,
"name": &"golden_numeral_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7qe3o")
}],
"loop": true,
"name": &"golden_numeral_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_be86q")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7m6w8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wmtog")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_eifcy")
}],
"loop": true,
"name": &"golden_numeral_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qddpr")
}],
"loop": true,
"name": &"golden_numeral_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_wp0fk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4wrc3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_26ptn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_0e6fw")
}],
"loop": true,
"name": &"golden_numeral_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_m4nl6")
}],
"loop": true,
"name": &"golden_numeral_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qbwk6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_prhqi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ekfot")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_q8vfh")
}],
"loop": true,
"name": &"golden_numeral_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3rryp")
}],
"loop": true,
"name": &"golden_numeral_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_uldos")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t5hu1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5rp2w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_b5knn")
}],
"loop": true,
"name": &"golden_numeral_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_h1ckp")
}],
"loop": true,
"name": &"golden_numeral_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_napai")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_vc8k8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1eumg")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hot6r")
}],
"loop": true,
"name": &"golden_numeral_triobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_61qg4")
}],
"loop": true,
"name": &"golden_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qhunj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_j4upi")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ylokc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yul8s")
}],
"loop": true,
"name": &"golden_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_kvpu4")
}],
"loop": true,
"name": &"golden_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7ddb2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_b474m")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1x5i6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xxefo")
}],
"loop": true,
"name": &"golden_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_p375u")
}],
"loop": true,
"name": &"golden_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1i5tx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7f580")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2kxts")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ebvke")
}],
"loop": true,
"name": &"golden_tetrobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_mas4y")
}],
"loop": true,
"name": &"golden_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lp1jt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sh8f5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ug2d3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1gthn")
}],
"loop": true,
"name": &"golden_triobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fooon")
}],
"loop": true,
"name": &"labyrinth_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_2i0p4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_t313o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ht46x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dn4xx")
}],
"loop": true,
"name": &"labyrinth_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_v50kh")
}],
"loop": true,
"name": &"labyrinth_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7wpkf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_072lk")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6kti5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_27306")
}],
"loop": true,
"name": &"labyrinth_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ys1ht")
}],
"loop": true,
"name": &"labyrinth_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_88oqu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_bb62w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qixhe")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_nj3r7")
}],
"loop": true,
"name": &"labyrinth_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_g34wk")
}],
"loop": true,
"name": &"labyrinth_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7qbuc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_caxp7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_tdosv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_r71k3")
}],
"loop": true,
"name": &"labyrinth_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_err4i")
}],
"loop": true,
"name": &"labyrinth_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ofsmo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_re0ta")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7tohs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_y8nt0")
}],
"loop": true,
"name": &"labyrinth_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_b214j")
}],
"loop": true,
"name": &"labyrinth_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_i5mtf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_m4r1h")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2g3xq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ly6aw")
}],
"loop": true,
"name": &"labyrinth_triobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_l82by")
}],
"loop": true,
"name": &"nemesis_diobol_flat",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ogh3r")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gtppu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f8y21")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5xw4q")
}],
"loop": true,
"name": &"nemesis_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_t6oo6")
}],
"loop": true,
"name": &"nemesis_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_bxosa")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_djuw5")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_d1ror")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6f8cu")
}],
"loop": true,
"name": &"nemesis_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_k2ty4")
}],
"loop": true,
"name": &"nemesis_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_voy3u")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_oebr0")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jvs8v")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_7ln20")
}],
"loop": true,
"name": &"nemesis_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5a60q")
}],
"loop": true,
"name": &"nemesis_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_shnfu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_qse31")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_cp4ho")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_teu5v")
}],
"loop": true,
"name": &"nemesis_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qthd5")
}],
"loop": true,
"name": &"nemesis_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5km65")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jin3l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kb0k2")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_evja3")
}],
"loop": true,
"name": &"nemesis_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_clid7")
}],
"loop": true,
"name": &"nemesis_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fgqcn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_knrtd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_loabj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_mp4ls")
}],
"loop": true,
"name": &"nemesis_triobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rgsvj")
}],
"loop": true,
"name": &"passive_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_pagrj")
}],
"loop": true,
"name": &"passive_diobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_qs4o7")
}],
"loop": true,
"name": &"passive_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lvilo")
}],
"loop": true,
"name": &"passive_drachma_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1ygew")
}],
"loop": true,
"name": &"passive_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_q84vp")
}],
"loop": true,
"name": &"passive_obol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vufnq")
}],
"loop": true,
"name": &"passive_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5xoy7")
}],
"loop": true,
"name": &"passive_pentobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ax4hc")
}],
"loop": true,
"name": &"passive_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5g4t2")
}],
"loop": true,
"name": &"passive_tetrobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ykntv")
}],
"loop": true,
"name": &"passive_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1i8u5")
}],
"loop": true,
"name": &"passive_triobol_flip",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_sdli0")
}],
"loop": true,
"name": &"payoff_diobol_flat",
"speed": 10.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_xb8ju")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_hfon8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fd5ob")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8qqta")
}],
"loop": true,
"name": &"payoff_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_4c0hi")
}],
"loop": true,
"name": &"payoff_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_xatqq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wmu80")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_gpwr3")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fnn6p")
}],
"loop": true,
"name": &"payoff_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_q0jie")
}],
"loop": true,
"name": &"payoff_obol_flat",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_o1lqx")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_845xd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_2jgji")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xxfua")
}],
"loop": true,
"name": &"payoff_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vboku")
}],
"loop": true,
"name": &"payoff_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_gtgmn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_68osd")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_4yd2w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yju1b")
}],
"loop": true,
"name": &"payoff_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lvird")
}],
"loop": true,
"name": &"payoff_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3dvs8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_k41yj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yw4rn")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fmp02")
}],
"loop": true,
"name": &"payoff_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_mbby5")
}],
"loop": true,
"name": &"payoff_triobol_flat",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_r8mr1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xthjj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_u3k27")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kraas")
}],
"loop": true,
"name": &"payoff_triobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_kgqsw")
}],
"loop": true,
"name": &"power_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_whpkp")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_snmwj")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ka1ls")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_05emt")
}],
"loop": true,
"name": &"power_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_p7vcw")
}],
"loop": true,
"name": &"power_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_fatqe")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_5qgbc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6qes6")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_osfn7")
}],
"loop": true,
"name": &"power_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_lrn1j")
}],
"loop": true,
"name": &"power_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_4qtlr")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n82of")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_kq3l1")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1vh8q")
}],
"loop": true,
"name": &"power_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1p47o")
}],
"loop": true,
"name": &"power_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ijryq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_yos0u")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_lw8cv")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_70u7g")
}],
"loop": true,
"name": &"power_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_n780r")
}],
"loop": true,
"name": &"power_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_0jp4y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_er25y")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_x5cim")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ajsbs")
}],
"loop": true,
"name": &"power_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_286b0")
}],
"loop": true,
"name": &"power_triobol_flat",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1a42a")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_renuw")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_co1c7")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_n0d26")
}],
"loop": true,
"name": &"power_triobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_57o6n")
}],
"loop": true,
"name": &"thorns_diobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_6beec")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_jtge8")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xsybm")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_f0sdj")
}],
"loop": true,
"name": &"thorns_diobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_7e5f2")
}],
"loop": true,
"name": &"thorns_drachma_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_5re0o")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_wkt7l")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_3bvoo")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ktpe3")
}],
"loop": true,
"name": &"thorns_drachma_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_naf2t")
}],
"loop": true,
"name": &"thorns_obol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_ubtav")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rye05")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_uvl7b")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_rnc5o")
}],
"loop": true,
"name": &"thorns_obol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_1dhkj")
}],
"loop": true,
"name": &"thorns_pentobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_aj057")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_fu6rf")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_pgm0x")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_60frx")
}],
"loop": true,
"name": &"thorns_pentobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_yg082")
}],
"loop": true,
"name": &"thorns_tetrobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_h2lhs")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ulmww")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6swcu")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_aanmg")
}],
"loop": true,
"name": &"thorns_tetrobol_flip",
"speed": 20.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_rcgqk")
}],
"loop": true,
"name": &"thorns_triobol_flat",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_n56qc")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_crkbb")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6p8wl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_sp62t")
}],
"loop": true,
"name": &"thorns_triobol_flip",
"speed": 20.0
}]

[sub_resource type="Shader" id="Shader_d1ytf"]
code = "// Ben's Uber Pixel Shader
// WARNING - Shader expects uniform inputs in the range 0.0 - 1.0 for Colors. 
//           Therefore, be sure that Colors being passed in are in the correct range of (0-1, 0-1, 0-1, 0-1).
shader_type canvas_item;

// --- Utilty Functions --- //
const bool DEBUG = true;
const float TIME_OFFSET = 10.0; //offset all start times by this... for some reason things line up better with expectations
const vec2 HORIZONTAL_VERTICAL_OFFSETS[4] = {vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1)};
const vec2 DIAGONAL_OUTLINE_OFFSETS[4] = {vec2(1, 1), vec2(-1, 1), vec2(1, -1), vec2(-1, -1)};

// checks if two values are 'equal' (within EPSILON of each other)
// necessary when doing float calculations since it's not perfectly precise
const float EPSILON = 0.001;
bool floateq(float val1, float val2) { return val1 >= val2 - EPSILON && val1 <= val2 + EPSILON; }
bool vec3eq(vec3 val1, vec3 val2) { return floateq(val1.r, val2.r) && floateq(val1.g, val2.g) && floateq(val1.b, val2.b); }

// Author: Michael Pohoreski https://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader
float random(vec2 seed){ return fract(cos(dot(seed, vec2(23.14069263277926, 2.665144142690225))) * 12345.6789); }
float snoise3(vec2 seed) { return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453); }
float randf_range(vec2 seed, float b1, float b2) { return mix(b1, b2, random(seed)); }
int randi_range(vec2 seed, int b1, int b2) { return int(randf_range(seed, float(b1), float(b2))); }
float sin0to1(float time) { return (sin(time)+1.0)/2.0; }
float cos0to1(float time) { return (cos(time)+1.0)/2.0; } 
float vary0to1(float time) { return 1.0-(cos(time)+1.0)/2.0; } // a transformed cos function that varies from 0 to 1. f(0) = 0, f(pi) = 1, f(2pi) = 0. 

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform bool POST_PROCESSING = false;

// pass in the mouse position here
uniform vec2 MOUSE = vec2(20, 20);

uniform bool DISABLE = false;

// --- Effects --- //
// EXCLUDE
// If use_exclude_colors, pixels of these colors are excluded from tint, color correction, scanline, and vignette effects.
group_uniforms Exclude;
uniform bool use_exclude_colors = true;
uniform vec3 exclude_color1: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color2: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color3: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color4: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color5: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color6: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color7: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color8: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders


// PAN/DISPLACE
// Displaces all pixels by (displace_x, displace_y). Texture repeats if displace_repeat.
// WARNING - Offsetting beyond the bounds of the texture will result in the texture being cut off
group_uniforms PanAndDisplacement;
uniform int displace_x = 0;
uniform int displace_y = 0;
uniform bool displace_repeat = true;
// Texture will automatically scroll if auto_pan_speed is nonzero.
// Set auto_pan_speed to a positive number for left/up panning; negative number for right/down panning
// WARNING - Repeat generally should be true for auto_pan_speed, otherwise it will immediately pan out of view
uniform vec2 auto_pan_speed = vec2(0, 0);

// RECOLOR
// Replaces replace_colorN with replace_with_colorN.
group_uniforms Recolor;
uniform vec3 replace_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color5: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color5: source_color = vec3(0.0, 0.0, 0.0);
// special extra uniform specifically intended to recolor outlines
uniform vec3 replace_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 replace_with_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392);

// RECOLOR OSCILLATE
// Pixels of replace_color_oscillate_from oscillate between their original color and replace_color_oscillate_to at replace_color_oscillate_speed.
group_uniforms RecolorOscillate;
uniform vec3 auto_replace_color: source_color = vec3(0.0, 0.0, 0.0);
uniform bool auto_replace_replace_original_color = false;
uniform vec3 auto_replace_replace_original_color_with: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 auto_replace_to_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float auto_replace_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_replace_start_time = 0.0;

// TINT
// Tint the texture with tint_color.
// The strength of the tint is controlled by tint_strength.
group_uniforms Tint;
uniform vec3 tint_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float tint_strength: hint_range(0.0, 1.0) = 0.0;

// FLASH
// Flash the texture with flash_color. Essentially, this is a second layer of tint.
// flash_strength controls how much color is the original and how much is the flash_color.
group_uniforms Flash;
uniform vec3 flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float flash_strength: hint_range(0.0, 1.0) = 0.0;
// auto_flash_speed will cause infinite and repeated flashing in auto_flash_color if nonzero and controls the speed of this flashing.
// auto_flash_bound1 and auto_flash_bound2 provide the bounds of the flashing effect.
// To prevent the auto flash from starting in the middle of the animation, set auto_flash_start_time to the global time when enabling auto flash.
// TIP - auto flash and regular ('manual') flash stack, which is why they have two separate colors.
uniform vec3 auto_flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float auto_flash_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flash_bound1: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flash_bound2: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flash_start_time = 0.0;

// COLOR CORRECTION
group_uniforms ColorCorrection;
// Applies red, green, or blue color correction with red_correct, green_correct, and blue_correct. 
// Applies grayscale with gray_correct.
// Modify brightness, contrast, or saturation with brightness_correct, contrast_correct, and saturation_correct.
// TIP - these values can actually go higher or lower, if you want a more extreme effect
uniform float red_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float green_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float blue_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float gray_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float brightness_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float contrast_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float saturation_correct: hint_range(0.0, 2.0, 0.01) = 1.0;

// TODO - more funky color options
// rg swap - swaps the original (before any other swaps) value of r and g
// gb swap
// br swap
// r_eq_g - sets r = g
// r_eq_b
// g_eq_r
// g_eq_b
// b_eq_r
// b_eq_g

// TODO - ROUGHEN - applies randomized brightness modifications across the texture (both positive and negative) to 'roughen' it up

// SCANLINES
// Create a line across the canvas of scanline_color. scanline_strength controls the alpha of the line.
// Define the position of the line with scanline_left_to_right_position, scanline_top_to_bottom_position,
// scanline_topleft_to_bottomright_position, and scanline_topright_to_bottomleft_position.
// The line is vertical if going left to right, horizontal if going top to bottom, and diagonal for the other two.
group_uniforms Scanline;
uniform vec3 scanline_color: source_color = vec3(0.98, 0.69, 0.23);
uniform float scanline_strength: hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float scanline_left_to_right_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_top_to_bottom_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topleft_to_bottomright_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topright_to_bottomleft_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
// auto_scanline_DIRECTION_on will enable automatic repeating scanlines in that direction.
// auto_scanline_DIRECTION_reverse will flip the direction.
// The scan will be visible for auto_scanline_DIRECTION_scan_duration, with a delay of 
// auto_scanline_DIRECTION_scan_duration before the next scan begins.
// To prevent the scanline from starting in the middle of the texture, provide the global time to auto_scanline_DIRECTION_start_time.
uniform bool auto_scanline_left_to_right_on = false;
uniform bool auto_scanline_left_to_right_reverse = false;
uniform float auto_scanline_left_to_right_start_time = 0.0;
uniform float auto_scanline_left_to_right_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_left_to_right_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_top_to_bottom_on = false;
uniform bool auto_scanline_top_to_bottom_reverse = false;
uniform float auto_scanline_top_to_bottom_start_time = 0.0;
uniform float auto_scanline_top_to_bottom_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_top_to_bottom_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topleft_to_bottomright_on = false;
uniform bool auto_scanline_topleft_to_bottomright_reverse = false;
uniform float auto_scanline_topleft_to_bottomright_start_time = 0.0;
uniform float auto_scanline_topleft_to_bottomright_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topleft_to_bottomright_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topright_to_bottomleft_on = false;
uniform bool auto_scanline_topright_to_bottomleft_reverse = false;
uniform float auto_scanline_topright_to_bottomleft_start_time = 0.0;
uniform float auto_scanline_topright_to_bottomleft_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topright_to_bottomleft_delay: hint_range(0.0, 10.0, 0.01) = 1.0;

// OUTLINE
// Adds a pixel outline to the texture, with glow_color and glow_thickness.
// glow_dialgonals controls if we also create this outline diagonally, which makes it thicker.
// This can be used to create a solid outline if auto_glow_speed is left at 0.
// WARNING - Shaders cannot draw outside of the bounds of the canvas, so the canvas may need extra transparent space on the sides.
// WARNING - Can have some odd effects with sprites containing partial transparency.
group_uniforms GlowAndOutline;
uniform vec4 glow_color: source_color = vec4(1.0);
uniform int glow_thickness: hint_range(0, 10) = 0;
uniform bool glow_diagonals = false;
// auto_glow_speed defines the speed of a glow fluctuating alpha between the outline's alpha and auto_glow_bound at auto_glow_speed.
// To prevent the auto glow from starting in the middle of the animation, set auto_glow_start_time to the global time when enabling auto glow.
uniform float auto_glow_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_glow_bound: hint_range(0.0, 1.0) = 0.75;
uniform float auto_glow_start_time = 0.0;

// DISINTEGRATE
// Sets 'random' pixels in the canvas to disintegrate_color with alpha between disintegrate_alpha_bound1 and disintegrate_alpha_bound2.
// By default, since these bounds are 0, the pixels will be made fully transparent and therefore disintegrate_color is unused.
// disintegrate_strength controls the amount of pixels affected, from none (0) to all of them (1).
// Change the pattern via disintegrate_seed.
// disintegrate_as_static changes the purpose of disintegrate to not affect the alpha of the texture.
// Instead, it layers a static-looking pattern on top using disintegrate_color, where the color is based on disintegrate_color
// and the alpha of the static pattern ranges randomly between disintegrate_alpha_bound1 and disintegrate_alpha_bound2 per pixel.
// Note that with the default bounds of 0 and 0, this setting creates no effect whatsoever.
// If auto_disintegrate_random_seed_speed is nonzero, applies randomization to the seed over time based on speed.
// In this case, disintegrate_seed has no effect.
group_uniforms Disintegrate;
uniform int disintegrate_seed = 1;
uniform vec3 disintegrate_color : source_color = vec3(0.0, 0.0, 0.0);
uniform float disintegrate_strength: hint_range(0.0, 1.0) = 0.0;
uniform float disintegrate_alpha_bound1 = 0.0;
uniform float disintegrate_alpha_bound2 = 0.0;
uniform bool disintegrate_as_static = false;
uniform float auto_disintegrate_random_seed_speed: hint_range(0.0, 1.0) = 0.0;

// FOG
// Applies a fog_noise_texture filter over the texture with modifiable fog_opacity and fog_density, moving at fog_speed
// Mostly used to create fog effects by assigning to a ColorRect (color is changable by changing ColorRect color too!)
// NOTE - Don't use this as a post processing shader. 
group_uniforms Fog;
uniform bool fog_enabled = false;
uniform sampler2D fog_noise_texture: repeat_enable, filter_nearest;
uniform float fog_opacity: hint_range(0.0, 1.0) = 0.5;
uniform float fog_density: hint_range(0.0, 1.0) = 0.25;
uniform vec2 fog_speed = vec2(-0.02, 0.0);

// COLORLINES
// Creates vertical/horizontal lines of colorline_color spaced colorline_spacing pixels apart 
// with colorline_strength alpha across the texture.
group_uniforms Colorlines;
uniform vec3 vertical_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int vertical_colorline_spacing = 2;
uniform float vertical_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;
uniform vec3 horizontal_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int horizontal_colorline_spacing = 2;
uniform float horizontal_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;

// CHECKER
// Creates a checkerboard pattern across the texture of checker_color with checker_strength alpha.
// checker_x_size and checker_y_size defines the size of each rectangular checker
// checker_x_pattern and checker_y_pattern affect the pattern of the checker pattern (which
// can stop looking checkered with different values).
// checker_contrast_amount applies a darkening effect to pixels of the checkerboard that are already dark.
// checker_contrast_ratio increases the contrast of the darkening effect between light and dark colored pixels,
// ie dark pixels become even darker.
group_uniforms CHECKER;
uniform vec3 checker_color: source_color = vec3(0.2, 0.2, 0.2);
uniform float checker_strength: hint_range(0.0, 1.0, 0.01) = 0.0; //0.3 is a good one
uniform int checker_x_size: hint_range(1, 64, 1) = 1;
uniform int checker_y_size: hint_range(1, 64, 1) = 1;
uniform int checker_x_pattern: hint_range(1, 32, 1) = 2;
uniform int checker_y_pattern: hint_range(1, 32, 1) = 2;
uniform float checker_contrast_amount: hint_range(-10.0, 10.0, 0.1) = 1.0;
uniform float checker_contrast_ratio: hint_range(0.0, 10.0, 0.01) = 0.5;
// TODO - experiment a bit more with the contrast calculation here - maybe subtract 0.5 and LIGHTEN lighter areas?

// MOUSELIGHT
// Creates a circular lighting effect at the mouse's position if mouselight_on, of mouselight_color and mouselight_strength alpha.
// Mouselight size defines the radius of the light effect.
// If mouselight_soften_edges, pixels further from the center of the light are more transparent.
// If mouselight_checker, the effect will be checkered in a way that interacts with the CHECKER effect.
// If auto_mouselight_flicker_speed is non-zero, the light will oscillate in size between mouselight_size and auto_mouselight_flicker_speed
group_uniforms Mouselight;
uniform bool mouselight_on = false;
uniform vec3 mouselight_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float mouselight_strength = 0.5;
uniform int mouselight_size = 8;
uniform bool mouselight_soften_edges = true;
uniform bool mouselight_checker = false;
uniform float auto_mouselight_flicker_speed: hint_range(0.0, 20.0) = 8;
uniform float auto_mouselight_flicker_bound = 10;

// CUT
// Cuts off all pixels of the texture from left/right/top/bottom.
group_uniforms Cut;
uniform float cut_left: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_right: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_top: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_bottom: hint_range(0.0, 1.0, 0.001) = 0.0;

// VIGNETTE
// Applies a circular vignette effect on the canvas if vignette_on.
// The vignette has a vignette_radius and a vignette_color.
// If vignette_ignore_transparent, transparent pixels will not have the vignette applied.
// This is generally useful if you want to apply a vignette on something besides the entire screen.
// Radius -> 0 tends to do some crazy effects
group_uniforms Vignette;
uniform bool vignette_on = false;
uniform bool vignette_ignore_transparent = false;
uniform vec3 vignette_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float vignette_radius: hint_range(0.001, 20.0, 0.01) = 1.0;

// TRANSPARENCY
// Controls transparency of the texture.
// If auto_flicker_speed is not zero, oscillates between transparency and auto_flicker_bounds at auto_flicker_speed.
// To prevent the auto flicker from starting in the middle of the animation, set auto_flicker_start_time to the global time when enabling auto flicker.
group_uniforms Transparency;
uniform float transparency: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flicker_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flicker_bound: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flicker_start_time = 0.0;

// --- Fragment Shader --- //
void fragment() 
{
	if (!DISABLE) {
	
	COLOR = texture(TEXTURE, UV);
	
	// --- CALCULATE CONSTANTS ---
	// WARNING - Don't use the ones with _ directly. 
	// the size of this canvas in pixels (ex 10x10)
	int _SIZE_IN_PIXELS_X = int(floor(1.0 / TEXTURE_PIXEL_SIZE.x));
	int _SIZE_IN_PIXELS_Y = int(floor(1.0 / TEXTURE_PIXEL_SIZE.y));
	// the size of the screen in pixels (ex 320x180)
	int _SCREEN_SIZE_IN_PIXELS_X = int(floor(1.0 / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_SIZE_IN_PIXELS_Y = int(floor(1.0 / SCREEN_PIXEL_SIZE.y));
	
	// the specific x and y pixel coordinates within texture
	int _PIXEL_X = int(floor(UV.x / TEXTURE_PIXEL_SIZE.x));
	int _PIXEL_Y = int(floor(UV.y / TEXTURE_PIXEL_SIZE.y));
	// the specific x and y pixel coordinates within screen
	int _SCREEN_PIXEL_X = int(floor(SCREEN_UV.x / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_PIXEL_Y = int(floor(SCREEN_UV.y / SCREEN_PIXEL_SIZE.y));
	
	// WARNING - Use these instead. This accounts for if this is a normal or post processing shader.
	// Size of a pixel for this canvas (ie 1/320x1/180)
	float PIXEL_SIZE_X = POST_PROCESSING ? SCREEN_PIXEL_SIZE.x : TEXTURE_PIXEL_SIZE.x;
	float PIXEL_SIZE_Y = POST_PROCESSING ? SCREEN_PIXEL_SIZE.y : TEXTURE_PIXEL_SIZE.y;
	// Size of the canvas in pixels. (ex 320x180)
	int SIZE_IN_PIXELS_X = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_X : _SIZE_IN_PIXELS_X;
	int SIZE_IN_PIXELS_Y = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_Y : _SIZE_IN_PIXELS_Y;
	// The specific XY coordinates of the current pixel.
	int X = POST_PROCESSING ? _SCREEN_PIXEL_X : _PIXEL_X;
	int Y = POST_PROCESSING ? _SCREEN_PIXEL_Y : _PIXEL_Y;
	// UV coordinates of the current pixel.
	vec2 MUV = POST_PROCESSING ? SCREEN_UV : UV;
	// ---
	
	
	// DISPLACE & PAN
	vec2 adjUV = vec2(0, 0); // WARNING - Use this instead of UV below, otherwise effects break with panning & displace
	
	float displaceUVX = MUV.x + (SCREEN_PIXEL_SIZE.x * float(displace_x));
	float displaceUVY = MUV.y + (SCREEN_PIXEL_SIZE.y * float(displace_y));
	if (displace_repeat) {
		adjUV = mod(vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed, 1.00000);
	} else {
		adjUV = vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed;
	}
	
	// $HACK$ doing this as a ternary breaks the preview, for some reason
	if (POST_PROCESSING) 
		COLOR = texture(SCREEN_TEXTURE, adjUV);
	else 
		COLOR = texture(TEXTURE, adjUV);
	
	// EXCLUDE COLORS
	bool is_exclude_color = use_exclude_colors && (vec3eq(COLOR.rgb, exclude_color1) || vec3eq(COLOR.rgb, exclude_color2) || vec3eq(COLOR.rgb, exclude_color3) || vec3eq(COLOR.rgb, exclude_color4) || vec3eq(COLOR.rgb, exclude_color5) || vec3eq(COLOR.rgb, exclude_color6) || vec3eq(COLOR.rgb, exclude_color7) || vec3eq(COLOR.rgb, exclude_color8));
	
	// RECOLOR
	if (vec3eq(COLOR.rgb, replace_color1)) 
		COLOR.rgb = replace_with_color1;
	if (vec3eq(COLOR.rgb, replace_color2)) 
		COLOR.rgb = replace_with_color2;
	if (vec3eq(COLOR.rgb, replace_color3)) 
		COLOR.rgb = replace_with_color3;
	if (vec3eq(COLOR.rgb, replace_color4)) 
		COLOR.rgb = replace_with_color4;
	if (vec3eq(COLOR.rgb, replace_color5)) 
		COLOR.rgb = replace_with_color5;
	if (vec3eq(COLOR.rgb, replace_color_outline))
		COLOR.rgb = replace_with_color_outline;
	
	if (vec3eq(COLOR.rgb, auto_replace_color)) {
		vec3 replaced = auto_replace_color;
		if (auto_replace_replace_original_color)
			replaced = auto_replace_replace_original_color_with;
		COLOR.rgb  = mix(replaced, auto_replace_to_color, abs(vary0to1((TIME-auto_replace_start_time + TIME_OFFSET) * auto_replace_speed)));
	}
	
	// TINT, COLOR CORRECTION, and SCANLINE ignore excluded colors
	if (!is_exclude_color) {
		// TINT
		COLOR.rgb = mix(COLOR.rgb, tint_color, tint_strength);

		// FLASH
		// apply automatic flash
		if (auto_flash_speed != 0.0) {
			float auto_strength = mix(auto_flash_bound1, auto_flash_bound2, abs(vary0to1((TIME-auto_flash_start_time + TIME_OFFSET) * auto_flash_speed)));
			COLOR.rgb = mix(COLOR.rgb, auto_flash_color, auto_strength);
		}
		// apply manual flash
		COLOR.rgb = mix(COLOR.rgb, flash_color, flash_strength);

		// COLOR CORRECTION
		COLOR.r = mix(COLOR.r, 1.0, red_correct);
		COLOR.g = mix(COLOR.g, 1.0, green_correct);
		COLOR.b = mix(COLOR.b, 1.0, blue_correct);
		COLOR.rgb = mix(COLOR.rgb, vec3(0.2126 * COLOR.r + 0.7152 * COLOR.g + 0.0722 * COLOR.b), gray_correct);
		COLOR.rgb = mix(vec3(0.0), COLOR.rgb, brightness_correct);
		COLOR.rgb = mix(vec3(0.5), COLOR.rgb, contrast_correct);
		COLOR.rgb = mix(vec3(dot(vec3(1.0), COLOR.rbg)), COLOR.rgb, saturation_correct);

		// SCANLINE
		// FIX
		if (COLOR.a != 0.0) {
			float l_to_r_pos = !auto_scanline_left_to_right_on ? scanline_left_to_right_position : abs((auto_scanline_left_to_right_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_left_to_right_start_time + TIME_OFFSET, auto_scanline_left_to_right_delay + auto_scanline_left_to_right_scan_duration), 0.0, auto_scanline_left_to_right_scan_duration)/auto_scanline_left_to_right_scan_duration)));
			float t_to_b_pos = !auto_scanline_top_to_bottom_on ? scanline_top_to_bottom_position : abs((auto_scanline_top_to_bottom_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_top_to_bottom_start_time + TIME_OFFSET, auto_scanline_top_to_bottom_delay + auto_scanline_top_to_bottom_scan_duration), 0.0, auto_scanline_top_to_bottom_scan_duration)/auto_scanline_top_to_bottom_scan_duration)));
			float tl_to_br_pos = !auto_scanline_topleft_to_bottomright_on ? scanline_topleft_to_bottomright_position : abs((auto_scanline_topleft_to_bottomright_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topleft_to_bottomright_start_time + TIME_OFFSET, auto_scanline_topleft_to_bottomright_delay + auto_scanline_topleft_to_bottomright_scan_duration), 0.0, auto_scanline_topleft_to_bottomright_scan_duration)/auto_scanline_topleft_to_bottomright_scan_duration)));
			float tr_to_bl_pos = !auto_scanline_topright_to_bottomleft_on ? scanline_topright_to_bottomleft_position : abs((auto_scanline_topright_to_bottomleft_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topright_to_bottomleft_start_time + TIME_OFFSET, auto_scanline_topright_to_bottomleft_delay + auto_scanline_topright_to_bottomleft_scan_duration), 0.0, auto_scanline_topright_to_bottomleft_scan_duration)/auto_scanline_topright_to_bottomleft_scan_duration)));

			if (X == int(floor(l_to_r_pos / float(PIXEL_SIZE_X))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (Y == int(floor(t_to_b_pos / float(PIXEL_SIZE_Y))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			int scanline_target_tlbr = int(floor(tl_to_br_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y)));
			int scanline_target_trbl = int(floor(tr_to_bl_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y))) - SIZE_IN_PIXELS_Y;
			if (X+Y == scanline_target_tlbr)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (X-Y == scanline_target_trbl)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
		}
	}

	// GLOW
	if (glow_thickness != 0) {
		vec2 outline_size = TEXTURE_PIXEL_SIZE * float(glow_thickness);
		float outline = 0.0;
		for (int i = 0; i < HORIZONTAL_VERTICAL_OFFSETS.length(); i++) {
			outline += texture(TEXTURE, adjUV + outline_size * HORIZONTAL_VERTICAL_OFFSETS[i]).a;
		}
		if (glow_diagonals) {
			for (int i = 0; i < DIAGONAL_OUTLINE_OFFSETS.length(); i++) {
				outline += texture(TEXTURE, adjUV + outline_size * DIAGONAL_OUTLINE_OFFSETS[i]).a;
			}
		}
		outline = min(outline, 1.0);
		// this is a bit of a coding $HACK$ to make auto_glow_bound do nothing if auto_glow_speed is 0, but it definitely works
		float alp = auto_glow_speed == 0.0 ? 1.0 : mix(auto_glow_bound, glow_color.a, vary0to1((TIME - auto_glow_start_time + TIME_OFFSET) * auto_glow_speed));
		COLOR = mix(COLOR, glow_color * alp, outline - COLOR.a);
	}

	// DISINTEGRATE
	if (!is_exclude_color && COLOR.a != 0.0) {
		vec2 s = adjUV * vec2(float(disintegrate_seed));
		s *= auto_disintegrate_random_seed_speed != 0.0 ? float(int(TIME / mix(1.0, 0.001, auto_disintegrate_random_seed_speed))) : 1.0;
		float r = random(s);
		if (r < disintegrate_strength) {
			float r_alpha = randf_range(s, disintegrate_alpha_bound1, disintegrate_alpha_bound2);
			COLOR.rgb = mix(COLOR.rgb, disintegrate_color, r_alpha);
			if (!disintegrate_as_static)
				COLOR.a = r_alpha;
		}
	}

	// FOG
	if (fog_enabled) {
		vec2 fog_uv = MUV + fog_speed * TIME;
		float noise_alpha = texture(fog_noise_texture, fog_uv).r;
		// Convert noise from (0.0, 1.0) to (-1.0, 1.0)
		float fog = clamp((noise_alpha * 2.0 - 1.0) + (fog_density * 2.0), 0.0, 1.0);
		COLOR.a *= fog * fog_opacity;
	}

	// COLORLINES	
	if (!is_exclude_color) {
		if (X % vertical_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, vertical_colorline_color, vertical_colorline_strength);
		}
		if (Y % horizontal_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, horizontal_colorline_color, horizontal_colorline_strength);
		}
	}

	// CHECKER
	if (!is_exclude_color) {	
		if (X/checker_x_size % checker_x_pattern != Y/checker_y_size % checker_y_pattern) {
			float pixel_darkness = (3.0 - (COLOR.r + COLOR.g + COLOR.b)) * checker_contrast_ratio; // calculates 0.0 to 1.0 where 1.0 is pure black and 0.0 is pure white
			vec3 cbcolor = mix(checker_color.rgb, vec3(0.0), pixel_darkness * checker_contrast_amount);
			COLOR.rgb = mix(COLOR.rgb, cbcolor, checker_strength);
		}
	}

	// MOUSELIGHT
	if (mouselight_on && (!mouselight_checker || X % 2 == Y % 2)) {
		float mouse_with_flicker = mix(auto_mouselight_flicker_bound, float(mouselight_size), vary0to1(TIME * auto_mouselight_flicker_speed));
		float dist_from_mouse = sqrt(pow(float(_SCREEN_PIXEL_X - int(MOUSE.x)), 2.0) + pow(float(_SCREEN_PIXEL_Y - int(MOUSE.y)), 2.0));
		if (dist_from_mouse <= float(mouse_with_flicker)) {
			//todo - make softening with distance optional as uniform
			float distance_mod = clamp((mouse_with_flicker - dist_from_mouse) / mouse_with_flicker, 0.0, 1.0);
			COLOR.rgb = mix(COLOR.rgb, mouselight_color, distance_mod * mouselight_strength);
		}
	}

	// CUT
	if (MUV.x < cut_left)
		COLOR.a = 0.0;
	if (MUV.x > 1.0-cut_right)
		COLOR.a = 0.0;
	if (MUV.y < cut_top)
		COLOR.a = 0.0;
	if (MUV.y > 1.0-cut_bottom)
		COLOR.a = 0.0;

	// VIGNETTE
	if (vignette_on && ((!vignette_ignore_transparent || COLOR.a != 0.0)) && !is_exclude_color) {
		float x = abs(adjUV.x-.5)*2.0;
		float y = abs(adjUV.y-.5)*2.0;
		float v = (sqrt((x*x)+(y*y))/vignette_radius);
		COLOR = mix(COLOR, vec4(vignette_color.r, vignette_color.g, vignette_color.b, 1.0), v);
	}

	// TRANSPARENCY
	if (COLOR.a != 0.0) {
		COLOR.a = mix(COLOR.a * transparency, auto_flicker_bound, vary0to1((TIME-auto_flicker_start_time + TIME_OFFSET) * auto_flicker_speed));
	}
	
	} //end if disable
}

void vertex()
{
	
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_3cyj1"]
resource_local_to_scene = true
shader = SubResource("Shader_d1ytf")
shader_parameter/POST_PROCESSING = false
shader_parameter/MOUSE = Vector2(20, 20)
shader_parameter/DISABLE = false
shader_parameter/use_exclude_colors = true
shader_parameter/exclude_color1 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color2 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color3 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color4 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color5 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color6 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color7 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color8 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/displace_x = 0
shader_parameter/displace_y = 0
shader_parameter/displace_repeat = true
shader_parameter/auto_pan_speed = Vector2(0, 0)
shader_parameter/replace_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/replace_with_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/auto_replace_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_replace_original_color = false
shader_parameter/auto_replace_replace_original_color_with = Color(0, 0, 0, 1)
shader_parameter/auto_replace_to_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_speed = 0.0
shader_parameter/auto_replace_start_time = 0.0
shader_parameter/tint_color = Color(0, 0, 0, 1)
shader_parameter/tint_strength = 0.0
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0
shader_parameter/auto_flash_color = Color(1, 1, 1, 1)
shader_parameter/auto_flash_speed = 0.0
shader_parameter/auto_flash_bound1 = 0.0
shader_parameter/auto_flash_bound2 = 1.0
shader_parameter/auto_flash_start_time = 0.0
shader_parameter/red_correct = 0.0
shader_parameter/green_correct = 0.0
shader_parameter/blue_correct = 0.0
shader_parameter/gray_correct = 0.0
shader_parameter/brightness_correct = 1.0
shader_parameter/contrast_correct = 1.0
shader_parameter/saturation_correct = 1.0
shader_parameter/scanline_color = Color(0.98, 0.69, 0.23, 1)
shader_parameter/scanline_strength = 1.0
shader_parameter/scanline_left_to_right_position = -0.001
shader_parameter/scanline_top_to_bottom_position = -0.001
shader_parameter/scanline_topleft_to_bottomright_position = -0.001
shader_parameter/scanline_topright_to_bottomleft_position = -0.001
shader_parameter/auto_scanline_left_to_right_on = false
shader_parameter/auto_scanline_left_to_right_reverse = false
shader_parameter/auto_scanline_left_to_right_start_time = 0.0
shader_parameter/auto_scanline_left_to_right_scan_duration = 0.5
shader_parameter/auto_scanline_left_to_right_delay = 1.0
shader_parameter/auto_scanline_top_to_bottom_on = false
shader_parameter/auto_scanline_top_to_bottom_reverse = false
shader_parameter/auto_scanline_top_to_bottom_start_time = 0.0
shader_parameter/auto_scanline_top_to_bottom_scan_duration = 0.5
shader_parameter/auto_scanline_top_to_bottom_delay = 1.0
shader_parameter/auto_scanline_topleft_to_bottomright_on = false
shader_parameter/auto_scanline_topleft_to_bottomright_reverse = false
shader_parameter/auto_scanline_topleft_to_bottomright_start_time = 0.0
shader_parameter/auto_scanline_topleft_to_bottomright_scan_duration = 0.5
shader_parameter/auto_scanline_topleft_to_bottomright_delay = 1.0
shader_parameter/auto_scanline_topright_to_bottomleft_on = false
shader_parameter/auto_scanline_topright_to_bottomleft_reverse = false
shader_parameter/auto_scanline_topright_to_bottomleft_start_time = 0.0
shader_parameter/auto_scanline_topright_to_bottomleft_scan_duration = 0.5
shader_parameter/auto_scanline_topright_to_bottomleft_delay = 1.0
shader_parameter/glow_color = Color(1, 1, 1, 1)
shader_parameter/glow_thickness = 0
shader_parameter/glow_diagonals = false
shader_parameter/auto_glow_speed = 0.0
shader_parameter/auto_glow_bound = 0.75
shader_parameter/auto_glow_start_time = 0.0
shader_parameter/disintegrate_seed = 1
shader_parameter/disintegrate_color = Color(0, 0, 0, 1)
shader_parameter/disintegrate_strength = 0.0
shader_parameter/disintegrate_alpha_bound1 = 0.0
shader_parameter/disintegrate_alpha_bound2 = 0.0
shader_parameter/disintegrate_as_static = false
shader_parameter/auto_disintegrate_random_seed_speed = 0.0
shader_parameter/fog_enabled = false
shader_parameter/fog_opacity = 0.5
shader_parameter/fog_density = 0.25
shader_parameter/fog_speed = Vector2(-0.02, 0)
shader_parameter/vertical_colorline_color = Color(1, 1, 1, 1)
shader_parameter/vertical_colorline_spacing = 2
shader_parameter/vertical_colorline_strength = 0.0
shader_parameter/horizontal_colorline_color = Color(1, 1, 1, 1)
shader_parameter/horizontal_colorline_spacing = 2
shader_parameter/horizontal_colorline_strength = 0.0
shader_parameter/checker_color = Color(0.2, 0.2, 0.2, 1)
shader_parameter/checker_strength = 0.0
shader_parameter/checker_x_size = 1
shader_parameter/checker_y_size = 1
shader_parameter/checker_x_pattern = 2
shader_parameter/checker_y_pattern = 2
shader_parameter/checker_contrast_amount = 1.0
shader_parameter/checker_contrast_ratio = 0.5
shader_parameter/mouselight_on = false
shader_parameter/mouselight_color = Color(1, 1, 1, 1)
shader_parameter/mouselight_strength = 0.5
shader_parameter/mouselight_size = 8
shader_parameter/mouselight_soften_edges = true
shader_parameter/mouselight_checker = false
shader_parameter/auto_mouselight_flicker_speed = 8.0
shader_parameter/auto_mouselight_flicker_bound = 10.0
shader_parameter/cut_left = 0.0
shader_parameter/cut_right = 0.0
shader_parameter/cut_top = 0.0
shader_parameter/cut_bottom = 0.0
shader_parameter/vignette_on = false
shader_parameter/vignette_ignore_transparent = false
shader_parameter/vignette_color = Color(0, 0, 0, 1)
shader_parameter/vignette_radius = 1.0
shader_parameter/transparency = 1.0
shader_parameter/auto_flicker_speed = 0.0
shader_parameter/auto_flicker_bound = 0.0
shader_parameter/auto_flicker_start_time = 0.0

[sub_resource type="Shader" id="Shader_4ssfh"]
code = "// Ben's Uber Pixel Shader
// WARNING - Shader expects uniform inputs in the range 0.0 - 1.0 for Colors. 
//           Therefore, be sure that Colors being passed in are in the correct range of (0-1, 0-1, 0-1, 0-1).
shader_type canvas_item;

// --- Utilty Functions --- //
const bool DEBUG = true;
const float TIME_OFFSET = 10.0; //offset all start times by this... for some reason things line up better with expectations
const vec2 HORIZONTAL_VERTICAL_OFFSETS[4] = {vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1)};
const vec2 DIAGONAL_OUTLINE_OFFSETS[4] = {vec2(1, 1), vec2(-1, 1), vec2(1, -1), vec2(-1, -1)};

// checks if two values are 'equal' (within EPSILON of each other)
// necessary when doing float calculations since it's not perfectly precise
const float EPSILON = 0.001;
bool floateq(float val1, float val2) { return val1 >= val2 - EPSILON && val1 <= val2 + EPSILON; }
bool vec3eq(vec3 val1, vec3 val2) { return floateq(val1.r, val2.r) && floateq(val1.g, val2.g) && floateq(val1.b, val2.b); }

// Author: Michael Pohoreski https://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader
float random(vec2 seed){ return fract(cos(dot(seed, vec2(23.14069263277926, 2.665144142690225))) * 12345.6789); }
float snoise3(vec2 seed) { return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453); }
float randf_range(vec2 seed, float b1, float b2) { return mix(b1, b2, random(seed)); }
int randi_range(vec2 seed, int b1, int b2) { return int(randf_range(seed, float(b1), float(b2))); }
float sin0to1(float time) { return (sin(time)+1.0)/2.0; }
float cos0to1(float time) { return (cos(time)+1.0)/2.0; } 
float vary0to1(float time) { return 1.0-(cos(time)+1.0)/2.0; } // a transformed cos function that varies from 0 to 1. f(0) = 0, f(pi) = 1, f(2pi) = 0. 

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform bool POST_PROCESSING = false;

// pass in the mouse position here
uniform vec2 MOUSE = vec2(20, 20);

uniform bool DISABLE = false;

// --- Effects --- //
// EXCLUDE
// If use_exclude_colors, pixels of these colors are excluded from tint, color correction, scanline, and vignette effects.
group_uniforms Exclude;
uniform bool use_exclude_colors = true;
uniform vec3 exclude_color1: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color2: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color3: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color4: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color5: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color6: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color7: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color8: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders


// PAN/DISPLACE
// Displaces all pixels by (displace_x, displace_y). Texture repeats if displace_repeat.
// WARNING - Offsetting beyond the bounds of the texture will result in the texture being cut off
group_uniforms PanAndDisplacement;
uniform int displace_x = 0;
uniform int displace_y = 0;
uniform bool displace_repeat = true;
// Texture will automatically scroll if auto_pan_speed is nonzero.
// Set auto_pan_speed to a positive number for left/up panning; negative number for right/down panning
// WARNING - Repeat generally should be true for auto_pan_speed, otherwise it will immediately pan out of view
uniform vec2 auto_pan_speed = vec2(0, 0);

// RECOLOR
// Replaces replace_colorN with replace_with_colorN.
group_uniforms Recolor;
uniform vec3 replace_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color5: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color5: source_color = vec3(0.0, 0.0, 0.0);
// special extra uniform specifically intended to recolor outlines
uniform vec3 replace_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 replace_with_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392);

// RECOLOR OSCILLATE
// Pixels of replace_color_oscillate_from oscillate between their original color and replace_color_oscillate_to at replace_color_oscillate_speed.
group_uniforms RecolorOscillate;
uniform vec3 auto_replace_color: source_color = vec3(0.0, 0.0, 0.0);
uniform bool auto_replace_replace_original_color = false;
uniform vec3 auto_replace_replace_original_color_with: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 auto_replace_to_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float auto_replace_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_replace_start_time = 0.0;

// TINT
// Tint the texture with tint_color.
// The strength of the tint is controlled by tint_strength.
group_uniforms Tint;
uniform vec3 tint_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float tint_strength: hint_range(0.0, 1.0) = 0.0;

// FLASH
// Flash the texture with flash_color. Essentially, this is a second layer of tint.
// flash_strength controls how much color is the original and how much is the flash_color.
group_uniforms Flash;
uniform vec3 flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float flash_strength: hint_range(0.0, 1.0) = 0.0;
// auto_flash_speed will cause infinite and repeated flashing in auto_flash_color if nonzero and controls the speed of this flashing.
// auto_flash_bound1 and auto_flash_bound2 provide the bounds of the flashing effect.
// To prevent the auto flash from starting in the middle of the animation, set auto_flash_start_time to the global time when enabling auto flash.
// TIP - auto flash and regular ('manual') flash stack, which is why they have two separate colors.
uniform vec3 auto_flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float auto_flash_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flash_bound1: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flash_bound2: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flash_start_time = 0.0;

// COLOR CORRECTION
group_uniforms ColorCorrection;
// Applies red, green, or blue color correction with red_correct, green_correct, and blue_correct. 
// Applies grayscale with gray_correct.
// Modify brightness, contrast, or saturation with brightness_correct, contrast_correct, and saturation_correct.
// TIP - these values can actually go higher or lower, if you want a more extreme effect
uniform float red_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float green_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float blue_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float gray_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float brightness_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float contrast_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float saturation_correct: hint_range(0.0, 2.0, 0.01) = 1.0;

// TODO - more funky color options
// rg swap - swaps the original (before any other swaps) value of r and g
// gb swap
// br swap
// r_eq_g - sets r = g
// r_eq_b
// g_eq_r
// g_eq_b
// b_eq_r
// b_eq_g

// TODO - ROUGHEN - applies randomized brightness modifications across the texture (both positive and negative) to 'roughen' it up

// SCANLINES
// Create a line across the canvas of scanline_color. scanline_strength controls the alpha of the line.
// Define the position of the line with scanline_left_to_right_position, scanline_top_to_bottom_position,
// scanline_topleft_to_bottomright_position, and scanline_topright_to_bottomleft_position.
// The line is vertical if going left to right, horizontal if going top to bottom, and diagonal for the other two.
group_uniforms Scanline;
uniform vec3 scanline_color: source_color = vec3(0.98, 0.69, 0.23);
uniform float scanline_strength: hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float scanline_left_to_right_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_top_to_bottom_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topleft_to_bottomright_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topright_to_bottomleft_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
// auto_scanline_DIRECTION_on will enable automatic repeating scanlines in that direction.
// auto_scanline_DIRECTION_reverse will flip the direction.
// The scan will be visible for auto_scanline_DIRECTION_scan_duration, with a delay of 
// auto_scanline_DIRECTION_scan_duration before the next scan begins.
// To prevent the scanline from starting in the middle of the texture, provide the global time to auto_scanline_DIRECTION_start_time.
uniform bool auto_scanline_left_to_right_on = false;
uniform bool auto_scanline_left_to_right_reverse = false;
uniform float auto_scanline_left_to_right_start_time = 0.0;
uniform float auto_scanline_left_to_right_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_left_to_right_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_top_to_bottom_on = false;
uniform bool auto_scanline_top_to_bottom_reverse = false;
uniform float auto_scanline_top_to_bottom_start_time = 0.0;
uniform float auto_scanline_top_to_bottom_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_top_to_bottom_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topleft_to_bottomright_on = false;
uniform bool auto_scanline_topleft_to_bottomright_reverse = false;
uniform float auto_scanline_topleft_to_bottomright_start_time = 0.0;
uniform float auto_scanline_topleft_to_bottomright_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topleft_to_bottomright_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topright_to_bottomleft_on = false;
uniform bool auto_scanline_topright_to_bottomleft_reverse = false;
uniform float auto_scanline_topright_to_bottomleft_start_time = 0.0;
uniform float auto_scanline_topright_to_bottomleft_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topright_to_bottomleft_delay: hint_range(0.0, 10.0, 0.01) = 1.0;

// OUTLINE
// Adds a pixel outline to the texture, with glow_color and glow_thickness.
// glow_dialgonals controls if we also create this outline diagonally, which makes it thicker.
// This can be used to create a solid outline if auto_glow_speed is left at 0.
// WARNING - Shaders cannot draw outside of the bounds of the canvas, so the canvas may need extra transparent space on the sides.
// WARNING - Can have some odd effects with sprites containing partial transparency.
group_uniforms GlowAndOutline;
uniform vec4 glow_color: source_color = vec4(1.0);
uniform int glow_thickness: hint_range(0, 10) = 0;
uniform bool glow_diagonals = false;
// auto_glow_speed defines the speed of a glow fluctuating alpha between the outline's alpha and auto_glow_bound at auto_glow_speed.
// To prevent the auto glow from starting in the middle of the animation, set auto_glow_start_time to the global time when enabling auto glow.
uniform float auto_glow_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_glow_bound: hint_range(0.0, 1.0) = 0.75;
uniform float auto_glow_start_time = 0.0;

// DISINTEGRATE
// Sets 'random' pixels in the canvas to disintegrate_color with alpha between disintegrate_alpha_bound1 and disintegrate_alpha_bound2.
// By default, since these bounds are 0, the pixels will be made fully transparent and therefore disintegrate_color is unused.
// disintegrate_strength controls the amount of pixels affected, from none (0) to all of them (1).
// Change the pattern via disintegrate_seed.
// disintegrate_as_static changes the purpose of disintegrate to not affect the alpha of the texture.
// Instead, it layers a static-looking pattern on top using disintegrate_color, where the color is based on disintegrate_color
// and the alpha of the static pattern ranges randomly between disintegrate_alpha_bound1 and disintegrate_alpha_bound2 per pixel.
// Note that with the default bounds of 0 and 0, this setting creates no effect whatsoever.
// If auto_disintegrate_random_seed_speed is nonzero, applies randomization to the seed over time based on speed.
// In this case, disintegrate_seed has no effect.
group_uniforms Disintegrate;
uniform int disintegrate_seed = 1;
uniform vec3 disintegrate_color : source_color = vec3(0.0, 0.0, 0.0);
uniform float disintegrate_strength: hint_range(0.0, 1.0) = 0.0;
uniform float disintegrate_alpha_bound1 = 0.0;
uniform float disintegrate_alpha_bound2 = 0.0;
uniform bool disintegrate_as_static = false;
uniform float auto_disintegrate_random_seed_speed: hint_range(0.0, 1.0) = 0.0;

// FOG
// Applies a fog_noise_texture filter over the texture with modifiable fog_opacity and fog_density, moving at fog_speed
// Mostly used to create fog effects by assigning to a ColorRect (color is changable by changing ColorRect color too!)
// NOTE - Don't use this as a post processing shader. 
group_uniforms Fog;
uniform bool fog_enabled = false;
uniform sampler2D fog_noise_texture: repeat_enable, filter_nearest;
uniform float fog_opacity: hint_range(0.0, 1.0) = 0.5;
uniform float fog_density: hint_range(0.0, 1.0) = 0.25;
uniform vec2 fog_speed = vec2(-0.02, 0.0);

// COLORLINES
// Creates vertical/horizontal lines of colorline_color spaced colorline_spacing pixels apart 
// with colorline_strength alpha across the texture.
group_uniforms Colorlines;
uniform vec3 vertical_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int vertical_colorline_spacing = 2;
uniform float vertical_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;
uniform vec3 horizontal_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int horizontal_colorline_spacing = 2;
uniform float horizontal_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;

// CHECKER
// Creates a checkerboard pattern across the texture of checker_color with checker_strength alpha.
// checker_x_size and checker_y_size defines the size of each rectangular checker
// checker_x_pattern and checker_y_pattern affect the pattern of the checker pattern (which
// can stop looking checkered with different values).
// checker_contrast_amount applies a darkening effect to pixels of the checkerboard that are already dark.
// checker_contrast_ratio increases the contrast of the darkening effect between light and dark colored pixels,
// ie dark pixels become even darker.
group_uniforms CHECKER;
uniform vec3 checker_color: source_color = vec3(0.2, 0.2, 0.2);
uniform float checker_strength: hint_range(0.0, 1.0, 0.01) = 0.0; //0.3 is a good one
uniform int checker_x_size: hint_range(1, 64, 1) = 1;
uniform int checker_y_size: hint_range(1, 64, 1) = 1;
uniform int checker_x_pattern: hint_range(1, 32, 1) = 2;
uniform int checker_y_pattern: hint_range(1, 32, 1) = 2;
uniform float checker_contrast_amount: hint_range(-10.0, 10.0, 0.1) = 1.0;
uniform float checker_contrast_ratio: hint_range(0.0, 10.0, 0.01) = 0.5;
// TODO - experiment a bit more with the contrast calculation here - maybe subtract 0.5 and LIGHTEN lighter areas?

// MOUSELIGHT
// Creates a circular lighting effect at the mouse's position if mouselight_on, of mouselight_color and mouselight_strength alpha.
// Mouselight size defines the radius of the light effect.
// If mouselight_soften_edges, pixels further from the center of the light are more transparent.
// If mouselight_checker, the effect will be checkered in a way that interacts with the CHECKER effect.
// If auto_mouselight_flicker_speed is non-zero, the light will oscillate in size between mouselight_size and auto_mouselight_flicker_speed
group_uniforms Mouselight;
uniform bool mouselight_on = false;
uniform vec3 mouselight_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float mouselight_strength = 0.5;
uniform int mouselight_size = 8;
uniform bool mouselight_soften_edges = true;
uniform bool mouselight_checker = false;
uniform float auto_mouselight_flicker_speed: hint_range(0.0, 20.0) = 8;
uniform float auto_mouselight_flicker_bound = 10;

// CUT
// Cuts off all pixels of the texture from left/right/top/bottom.
group_uniforms Cut;
uniform float cut_left: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_right: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_top: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_bottom: hint_range(0.0, 1.0, 0.001) = 0.0;

// VIGNETTE
// Applies a circular vignette effect on the canvas if vignette_on.
// The vignette has a vignette_radius and a vignette_color.
// If vignette_ignore_transparent, transparent pixels will not have the vignette applied.
// This is generally useful if you want to apply a vignette on something besides the entire screen.
// Radius -> 0 tends to do some crazy effects
group_uniforms Vignette;
uniform bool vignette_on = false;
uniform bool vignette_ignore_transparent = false;
uniform vec3 vignette_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float vignette_radius: hint_range(0.001, 20.0, 0.01) = 1.0;

// TRANSPARENCY
// Controls transparency of the texture.
// If auto_flicker_speed is not zero, oscillates between transparency and auto_flicker_bounds at auto_flicker_speed.
// To prevent the auto flicker from starting in the middle of the animation, set auto_flicker_start_time to the global time when enabling auto flicker.
group_uniforms Transparency;
uniform float transparency: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flicker_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flicker_bound: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flicker_start_time = 0.0;

// --- Fragment Shader --- //
void fragment() 
{
	if (!DISABLE) {
	
	COLOR = texture(TEXTURE, UV);
	
	// --- CALCULATE CONSTANTS ---
	// WARNING - Don't use the ones with _ directly. 
	// the size of this canvas in pixels (ex 10x10)
	int _SIZE_IN_PIXELS_X = int(floor(1.0 / TEXTURE_PIXEL_SIZE.x));
	int _SIZE_IN_PIXELS_Y = int(floor(1.0 / TEXTURE_PIXEL_SIZE.y));
	// the size of the screen in pixels (ex 320x180)
	int _SCREEN_SIZE_IN_PIXELS_X = int(floor(1.0 / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_SIZE_IN_PIXELS_Y = int(floor(1.0 / SCREEN_PIXEL_SIZE.y));
	
	// the specific x and y pixel coordinates within texture
	int _PIXEL_X = int(floor(UV.x / TEXTURE_PIXEL_SIZE.x));
	int _PIXEL_Y = int(floor(UV.y / TEXTURE_PIXEL_SIZE.y));
	// the specific x and y pixel coordinates within screen
	int _SCREEN_PIXEL_X = int(floor(SCREEN_UV.x / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_PIXEL_Y = int(floor(SCREEN_UV.y / SCREEN_PIXEL_SIZE.y));
	
	// WARNING - Use these instead. This accounts for if this is a normal or post processing shader.
	// Size of a pixel for this canvas (ie 1/320x1/180)
	float PIXEL_SIZE_X = POST_PROCESSING ? SCREEN_PIXEL_SIZE.x : TEXTURE_PIXEL_SIZE.x;
	float PIXEL_SIZE_Y = POST_PROCESSING ? SCREEN_PIXEL_SIZE.y : TEXTURE_PIXEL_SIZE.y;
	// Size of the canvas in pixels. (ex 320x180)
	int SIZE_IN_PIXELS_X = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_X : _SIZE_IN_PIXELS_X;
	int SIZE_IN_PIXELS_Y = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_Y : _SIZE_IN_PIXELS_Y;
	// The specific XY coordinates of the current pixel.
	int X = POST_PROCESSING ? _SCREEN_PIXEL_X : _PIXEL_X;
	int Y = POST_PROCESSING ? _SCREEN_PIXEL_Y : _PIXEL_Y;
	// UV coordinates of the current pixel.
	vec2 MUV = POST_PROCESSING ? SCREEN_UV : UV;
	// ---
	
	
	// DISPLACE & PAN
	vec2 adjUV = vec2(0, 0); // WARNING - Use this instead of UV below, otherwise effects break with panning & displace
	
	float displaceUVX = MUV.x + (SCREEN_PIXEL_SIZE.x * float(displace_x));
	float displaceUVY = MUV.y + (SCREEN_PIXEL_SIZE.y * float(displace_y));
	if (displace_repeat) {
		adjUV = mod(vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed, 1.00000);
	} else {
		adjUV = vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed;
	}
	
	// $HACK$ doing this as a ternary breaks the preview, for some reason
	if (POST_PROCESSING) 
		COLOR = texture(SCREEN_TEXTURE, adjUV);
	else 
		COLOR = texture(TEXTURE, adjUV);
	
	// EXCLUDE COLORS
	bool is_exclude_color = use_exclude_colors && (vec3eq(COLOR.rgb, exclude_color1) || vec3eq(COLOR.rgb, exclude_color2) || vec3eq(COLOR.rgb, exclude_color3) || vec3eq(COLOR.rgb, exclude_color4) || vec3eq(COLOR.rgb, exclude_color5) || vec3eq(COLOR.rgb, exclude_color6) || vec3eq(COLOR.rgb, exclude_color7) || vec3eq(COLOR.rgb, exclude_color8));
	
	// RECOLOR
	if (vec3eq(COLOR.rgb, replace_color1)) 
		COLOR.rgb = replace_with_color1;
	if (vec3eq(COLOR.rgb, replace_color2)) 
		COLOR.rgb = replace_with_color2;
	if (vec3eq(COLOR.rgb, replace_color3)) 
		COLOR.rgb = replace_with_color3;
	if (vec3eq(COLOR.rgb, replace_color4)) 
		COLOR.rgb = replace_with_color4;
	if (vec3eq(COLOR.rgb, replace_color5)) 
		COLOR.rgb = replace_with_color5;
	if (vec3eq(COLOR.rgb, replace_color_outline))
		COLOR.rgb = replace_with_color_outline;
	
	if (vec3eq(COLOR.rgb, auto_replace_color)) {
		vec3 replaced = auto_replace_color;
		if (auto_replace_replace_original_color)
			replaced = auto_replace_replace_original_color_with;
		COLOR.rgb  = mix(replaced, auto_replace_to_color, abs(vary0to1((TIME-auto_replace_start_time + TIME_OFFSET) * auto_replace_speed)));
	}
	
	// TINT, COLOR CORRECTION, and SCANLINE ignore excluded colors
	if (!is_exclude_color) {
		// TINT
		COLOR.rgb = mix(COLOR.rgb, tint_color, tint_strength);

		// FLASH
		// apply automatic flash
		if (auto_flash_speed != 0.0) {
			float auto_strength = mix(auto_flash_bound1, auto_flash_bound2, abs(vary0to1((TIME-auto_flash_start_time + TIME_OFFSET) * auto_flash_speed)));
			COLOR.rgb = mix(COLOR.rgb, auto_flash_color, auto_strength);
		}
		// apply manual flash
		COLOR.rgb = mix(COLOR.rgb, flash_color, flash_strength);

		// COLOR CORRECTION
		COLOR.r = mix(COLOR.r, 1.0, red_correct);
		COLOR.g = mix(COLOR.g, 1.0, green_correct);
		COLOR.b = mix(COLOR.b, 1.0, blue_correct);
		COLOR.rgb = mix(COLOR.rgb, vec3(0.2126 * COLOR.r + 0.7152 * COLOR.g + 0.0722 * COLOR.b), gray_correct);
		COLOR.rgb = mix(vec3(0.0), COLOR.rgb, brightness_correct);
		COLOR.rgb = mix(vec3(0.5), COLOR.rgb, contrast_correct);
		COLOR.rgb = mix(vec3(dot(vec3(1.0), COLOR.rbg)), COLOR.rgb, saturation_correct);

		// SCANLINE
		// FIX
		if (COLOR.a != 0.0) {
			float l_to_r_pos = !auto_scanline_left_to_right_on ? scanline_left_to_right_position : abs((auto_scanline_left_to_right_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_left_to_right_start_time + TIME_OFFSET, auto_scanline_left_to_right_delay + auto_scanline_left_to_right_scan_duration), 0.0, auto_scanline_left_to_right_scan_duration)/auto_scanline_left_to_right_scan_duration)));
			float t_to_b_pos = !auto_scanline_top_to_bottom_on ? scanline_top_to_bottom_position : abs((auto_scanline_top_to_bottom_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_top_to_bottom_start_time + TIME_OFFSET, auto_scanline_top_to_bottom_delay + auto_scanline_top_to_bottom_scan_duration), 0.0, auto_scanline_top_to_bottom_scan_duration)/auto_scanline_top_to_bottom_scan_duration)));
			float tl_to_br_pos = !auto_scanline_topleft_to_bottomright_on ? scanline_topleft_to_bottomright_position : abs((auto_scanline_topleft_to_bottomright_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topleft_to_bottomright_start_time + TIME_OFFSET, auto_scanline_topleft_to_bottomright_delay + auto_scanline_topleft_to_bottomright_scan_duration), 0.0, auto_scanline_topleft_to_bottomright_scan_duration)/auto_scanline_topleft_to_bottomright_scan_duration)));
			float tr_to_bl_pos = !auto_scanline_topright_to_bottomleft_on ? scanline_topright_to_bottomleft_position : abs((auto_scanline_topright_to_bottomleft_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topright_to_bottomleft_start_time + TIME_OFFSET, auto_scanline_topright_to_bottomleft_delay + auto_scanline_topright_to_bottomleft_scan_duration), 0.0, auto_scanline_topright_to_bottomleft_scan_duration)/auto_scanline_topright_to_bottomleft_scan_duration)));

			if (X == int(floor(l_to_r_pos / float(PIXEL_SIZE_X))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (Y == int(floor(t_to_b_pos / float(PIXEL_SIZE_Y))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			int scanline_target_tlbr = int(floor(tl_to_br_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y)));
			int scanline_target_trbl = int(floor(tr_to_bl_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y))) - SIZE_IN_PIXELS_Y;
			if (X+Y == scanline_target_tlbr)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (X-Y == scanline_target_trbl)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
		}
	}

	// GLOW
	if (glow_thickness != 0) {
		vec2 outline_size = TEXTURE_PIXEL_SIZE * float(glow_thickness);
		float outline = 0.0;
		for (int i = 0; i < HORIZONTAL_VERTICAL_OFFSETS.length(); i++) {
			outline += texture(TEXTURE, adjUV + outline_size * HORIZONTAL_VERTICAL_OFFSETS[i]).a;
		}
		if (glow_diagonals) {
			for (int i = 0; i < DIAGONAL_OUTLINE_OFFSETS.length(); i++) {
				outline += texture(TEXTURE, adjUV + outline_size * DIAGONAL_OUTLINE_OFFSETS[i]).a;
			}
		}
		outline = min(outline, 1.0);
		// this is a bit of a coding $HACK$ to make auto_glow_bound do nothing if auto_glow_speed is 0, but it definitely works
		float alp = auto_glow_speed == 0.0 ? 1.0 : mix(auto_glow_bound, glow_color.a, vary0to1((TIME - auto_glow_start_time + TIME_OFFSET) * auto_glow_speed));
		COLOR = mix(COLOR, glow_color * alp, outline - COLOR.a);
	}

	// DISINTEGRATE
	if (!is_exclude_color && COLOR.a != 0.0) {
		vec2 s = adjUV * vec2(float(disintegrate_seed));
		s *= auto_disintegrate_random_seed_speed != 0.0 ? float(int(TIME / mix(1.0, 0.001, auto_disintegrate_random_seed_speed))) : 1.0;
		float r = random(s);
		if (r < disintegrate_strength) {
			float r_alpha = randf_range(s, disintegrate_alpha_bound1, disintegrate_alpha_bound2);
			COLOR.rgb = mix(COLOR.rgb, disintegrate_color, r_alpha);
			if (!disintegrate_as_static)
				COLOR.a = r_alpha;
		}
	}

	// FOG
	if (fog_enabled) {
		vec2 fog_uv = MUV + fog_speed * TIME;
		float noise_alpha = texture(fog_noise_texture, fog_uv).r;
		// Convert noise from (0.0, 1.0) to (-1.0, 1.0)
		float fog = clamp((noise_alpha * 2.0 - 1.0) + (fog_density * 2.0), 0.0, 1.0);
		COLOR.a *= fog * fog_opacity;
	}

	// COLORLINES	
	if (!is_exclude_color) {
		if (X % vertical_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, vertical_colorline_color, vertical_colorline_strength);
		}
		if (Y % horizontal_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, horizontal_colorline_color, horizontal_colorline_strength);
		}
	}

	// CHECKER
	if (!is_exclude_color) {	
		if (X/checker_x_size % checker_x_pattern != Y/checker_y_size % checker_y_pattern) {
			float pixel_darkness = (3.0 - (COLOR.r + COLOR.g + COLOR.b)) * checker_contrast_ratio; // calculates 0.0 to 1.0 where 1.0 is pure black and 0.0 is pure white
			vec3 cbcolor = mix(checker_color.rgb, vec3(0.0), pixel_darkness * checker_contrast_amount);
			COLOR.rgb = mix(COLOR.rgb, cbcolor, checker_strength);
		}
	}

	// MOUSELIGHT
	if (mouselight_on && (!mouselight_checker || X % 2 == Y % 2)) {
		float mouse_with_flicker = mix(auto_mouselight_flicker_bound, float(mouselight_size), vary0to1(TIME * auto_mouselight_flicker_speed));
		float dist_from_mouse = sqrt(pow(float(_SCREEN_PIXEL_X - int(MOUSE.x)), 2.0) + pow(float(_SCREEN_PIXEL_Y - int(MOUSE.y)), 2.0));
		if (dist_from_mouse <= float(mouse_with_flicker)) {
			//todo - make softening with distance optional as uniform
			float distance_mod = clamp((mouse_with_flicker - dist_from_mouse) / mouse_with_flicker, 0.0, 1.0);
			COLOR.rgb = mix(COLOR.rgb, mouselight_color, distance_mod * mouselight_strength);
		}
	}

	// CUT
	if (MUV.x < cut_left)
		COLOR.a = 0.0;
	if (MUV.x > 1.0-cut_right)
		COLOR.a = 0.0;
	if (MUV.y < cut_top)
		COLOR.a = 0.0;
	if (MUV.y > 1.0-cut_bottom)
		COLOR.a = 0.0;

	// VIGNETTE
	if (vignette_on && ((!vignette_ignore_transparent || COLOR.a != 0.0)) && !is_exclude_color) {
		float x = abs(adjUV.x-.5)*2.0;
		float y = abs(adjUV.y-.5)*2.0;
		float v = (sqrt((x*x)+(y*y))/vignette_radius);
		COLOR = mix(COLOR, vec4(vignette_color.r, vignette_color.g, vignette_color.b, 1.0), v);
	}

	// TRANSPARENCY
	if (COLOR.a != 0.0) {
		COLOR.a = mix(COLOR.a * transparency, auto_flicker_bound, vary0to1((TIME-auto_flicker_start_time + TIME_OFFSET) * auto_flicker_speed));
	}
	
	} //end if disable
}

void vertex()
{
	
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_82nyx"]
resource_local_to_scene = true
shader = SubResource("Shader_4ssfh")
shader_parameter/POST_PROCESSING = false
shader_parameter/MOUSE = Vector2(20, 20)
shader_parameter/DISABLE = false
shader_parameter/use_exclude_colors = true
shader_parameter/exclude_color1 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color2 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color3 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color4 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color5 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color6 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color7 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color8 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/displace_x = 0
shader_parameter/displace_y = 0
shader_parameter/displace_repeat = true
shader_parameter/auto_pan_speed = Vector2(0, 0)
shader_parameter/replace_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/replace_with_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/auto_replace_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_replace_original_color = false
shader_parameter/auto_replace_replace_original_color_with = Color(0, 0, 0, 1)
shader_parameter/auto_replace_to_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_speed = 0.0
shader_parameter/auto_replace_start_time = 0.0
shader_parameter/tint_color = Color(0, 0, 0, 1)
shader_parameter/tint_strength = 0.0
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0
shader_parameter/auto_flash_color = Color(1, 1, 1, 1)
shader_parameter/auto_flash_speed = 0.0
shader_parameter/auto_flash_bound1 = 0.0
shader_parameter/auto_flash_bound2 = 1.0
shader_parameter/auto_flash_start_time = 0.0
shader_parameter/red_correct = 0.0
shader_parameter/green_correct = 0.0
shader_parameter/blue_correct = 0.0
shader_parameter/gray_correct = 0.0
shader_parameter/brightness_correct = 1.0
shader_parameter/contrast_correct = 1.0
shader_parameter/saturation_correct = 1.0
shader_parameter/scanline_color = Color(0.98, 0.69, 0.23, 1)
shader_parameter/scanline_strength = 1.0
shader_parameter/scanline_left_to_right_position = -0.001
shader_parameter/scanline_top_to_bottom_position = -0.001
shader_parameter/scanline_topleft_to_bottomright_position = -0.001
shader_parameter/scanline_topright_to_bottomleft_position = -0.001
shader_parameter/auto_scanline_left_to_right_on = false
shader_parameter/auto_scanline_left_to_right_reverse = false
shader_parameter/auto_scanline_left_to_right_start_time = 0.0
shader_parameter/auto_scanline_left_to_right_scan_duration = 0.5
shader_parameter/auto_scanline_left_to_right_delay = 1.0
shader_parameter/auto_scanline_top_to_bottom_on = false
shader_parameter/auto_scanline_top_to_bottom_reverse = false
shader_parameter/auto_scanline_top_to_bottom_start_time = 0.0
shader_parameter/auto_scanline_top_to_bottom_scan_duration = 0.5
shader_parameter/auto_scanline_top_to_bottom_delay = 1.0
shader_parameter/auto_scanline_topleft_to_bottomright_on = false
shader_parameter/auto_scanline_topleft_to_bottomright_reverse = false
shader_parameter/auto_scanline_topleft_to_bottomright_start_time = 0.0
shader_parameter/auto_scanline_topleft_to_bottomright_scan_duration = 0.5
shader_parameter/auto_scanline_topleft_to_bottomright_delay = 1.0
shader_parameter/auto_scanline_topright_to_bottomleft_on = false
shader_parameter/auto_scanline_topright_to_bottomleft_reverse = false
shader_parameter/auto_scanline_topright_to_bottomleft_start_time = 0.0
shader_parameter/auto_scanline_topright_to_bottomleft_scan_duration = 0.5
shader_parameter/auto_scanline_topright_to_bottomleft_delay = 1.0
shader_parameter/glow_color = Color(1, 1, 1, 1)
shader_parameter/glow_thickness = 0
shader_parameter/glow_diagonals = false
shader_parameter/auto_glow_speed = 0.0
shader_parameter/auto_glow_bound = 0.75
shader_parameter/auto_glow_start_time = 0.0
shader_parameter/disintegrate_seed = 1
shader_parameter/disintegrate_color = Color(0, 0, 0, 1)
shader_parameter/disintegrate_strength = 0.0
shader_parameter/disintegrate_alpha_bound1 = 0.0
shader_parameter/disintegrate_alpha_bound2 = 0.0
shader_parameter/disintegrate_as_static = false
shader_parameter/auto_disintegrate_random_seed_speed = 0.0
shader_parameter/fog_enabled = false
shader_parameter/fog_opacity = 0.5
shader_parameter/fog_density = 0.25
shader_parameter/fog_speed = Vector2(-0.02, 0)
shader_parameter/vertical_colorline_color = Color(1, 1, 1, 1)
shader_parameter/vertical_colorline_spacing = 2
shader_parameter/vertical_colorline_strength = 0.0
shader_parameter/horizontal_colorline_color = Color(1, 1, 1, 1)
shader_parameter/horizontal_colorline_spacing = 2
shader_parameter/horizontal_colorline_strength = 0.0
shader_parameter/checker_color = Color(0.2, 0.2, 0.2, 1)
shader_parameter/checker_strength = 0.0
shader_parameter/checker_x_size = 1
shader_parameter/checker_y_size = 1
shader_parameter/checker_x_pattern = 2
shader_parameter/checker_y_pattern = 2
shader_parameter/checker_contrast_amount = 1.0
shader_parameter/checker_contrast_ratio = 0.5
shader_parameter/mouselight_on = false
shader_parameter/mouselight_color = Color(1, 1, 1, 1)
shader_parameter/mouselight_strength = 0.5
shader_parameter/mouselight_size = 8
shader_parameter/mouselight_soften_edges = true
shader_parameter/mouselight_checker = false
shader_parameter/auto_mouselight_flicker_speed = 8.0
shader_parameter/auto_mouselight_flicker_bound = 10.0
shader_parameter/cut_left = 0.0
shader_parameter/cut_right = 0.0
shader_parameter/cut_top = 0.0
shader_parameter/cut_bottom = 0.0
shader_parameter/vignette_on = false
shader_parameter/vignette_ignore_transparent = false
shader_parameter/vignette_color = Color(0, 0, 0, 1)
shader_parameter/vignette_radius = 1.0
shader_parameter/transparency = 1.0
shader_parameter/auto_flicker_speed = 0.0
shader_parameter/auto_flicker_bound = 0.0
shader_parameter/auto_flicker_start_time = 0.0

[sub_resource type="Shader" id="Shader_iaxjw"]
code = "// Ben's Uber Pixel Shader
// WARNING - Shader expects uniform inputs in the range 0.0 - 1.0 for Colors. 
//           Therefore, be sure that Colors being passed in are in the correct range of (0-1, 0-1, 0-1, 0-1).
shader_type canvas_item;

// --- Utilty Functions --- //
const bool DEBUG = true;
const float TIME_OFFSET = 10.0; //offset all start times by this... for some reason things line up better with expectations
const vec2 HORIZONTAL_VERTICAL_OFFSETS[4] = {vec2(0, 1), vec2(-1, 0), vec2(1, 0), vec2(0, -1)};
const vec2 DIAGONAL_OUTLINE_OFFSETS[4] = {vec2(1, 1), vec2(-1, 1), vec2(1, -1), vec2(-1, -1)};

// checks if two values are 'equal' (within EPSILON of each other)
// necessary when doing float calculations since it's not perfectly precise
const float EPSILON = 0.001;
bool floateq(float val1, float val2) { return val1 >= val2 - EPSILON && val1 <= val2 + EPSILON; }
bool vec3eq(vec3 val1, vec3 val2) { return floateq(val1.r, val2.r) && floateq(val1.g, val2.g) && floateq(val1.b, val2.b); }

// Author: Michael Pohoreski https://stackoverflow.com/questions/5149544/can-i-generate-a-random-number-inside-a-pixel-shader
float random(vec2 seed){ return fract(cos(dot(seed, vec2(23.14069263277926, 2.665144142690225))) * 12345.6789); }
float snoise3(vec2 seed) { return fract(sin(dot(seed, vec2(12.9898, 78.233))) * 43758.5453); }
float randf_range(vec2 seed, float b1, float b2) { return mix(b1, b2, random(seed)); }
int randi_range(vec2 seed, int b1, int b2) { return int(randf_range(seed, float(b1), float(b2))); }
float sin0to1(float time) { return (sin(time)+1.0)/2.0; }
float cos0to1(float time) { return (cos(time)+1.0)/2.0; } 
float vary0to1(float time) { return 1.0-(cos(time)+1.0)/2.0; } // a transformed cos function that varies from 0 to 1. f(0) = 0, f(pi) = 1, f(2pi) = 0. 

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;

uniform bool POST_PROCESSING = false;

// pass in the mouse position here
uniform vec2 MOUSE = vec2(20, 20);

uniform bool DISABLE = false;

// --- Effects --- //
// EXCLUDE
// If use_exclude_colors, pixels of these colors are excluded from tint, color correction, scanline, and vignette effects.
group_uniforms Exclude;
uniform bool use_exclude_colors = true;
uniform vec3 exclude_color1: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color2: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color3: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color4: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color5: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color6: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color7: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 exclude_color8: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders


// PAN/DISPLACE
// Displaces all pixels by (displace_x, displace_y). Texture repeats if displace_repeat.
// WARNING - Offsetting beyond the bounds of the texture will result in the texture being cut off
group_uniforms PanAndDisplacement;
uniform int displace_x = 0;
uniform int displace_y = 0;
uniform bool displace_repeat = true;
// Texture will automatically scroll if auto_pan_speed is nonzero.
// Set auto_pan_speed to a positive number for left/up panning; negative number for right/down panning
// WARNING - Repeat generally should be true for auto_pan_speed, otherwise it will immediately pan out of view
uniform vec2 auto_pan_speed = vec2(0, 0);

// RECOLOR
// Replaces replace_colorN with replace_with_colorN.
group_uniforms Recolor;
uniform vec3 replace_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color1: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color2: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color3: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color4: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_color5: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 replace_with_color5: source_color = vec3(0.0, 0.0, 0.0);
// special extra uniform specifically intended to recolor outlines
uniform vec3 replace_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392); // these floats are the numbers I like to use for borders
uniform vec3 replace_with_color_outline: source_color = vec3(0.07843137254, 0.06274509803, 0.07450980392);

// RECOLOR OSCILLATE
// Pixels of replace_color_oscillate_from oscillate between their original color and replace_color_oscillate_to at replace_color_oscillate_speed.
group_uniforms RecolorOscillate;
uniform vec3 auto_replace_color: source_color = vec3(0.0, 0.0, 0.0);
uniform bool auto_replace_replace_original_color = false;
uniform vec3 auto_replace_replace_original_color_with: source_color = vec3(0.0, 0.0, 0.0);
uniform vec3 auto_replace_to_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float auto_replace_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_replace_start_time = 0.0;

// TINT
// Tint the texture with tint_color.
// The strength of the tint is controlled by tint_strength.
group_uniforms Tint;
uniform vec3 tint_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float tint_strength: hint_range(0.0, 1.0) = 0.0;

// FLASH
// Flash the texture with flash_color. Essentially, this is a second layer of tint.
// flash_strength controls how much color is the original and how much is the flash_color.
group_uniforms Flash;
uniform vec3 flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float flash_strength: hint_range(0.0, 1.0) = 0.0;
// auto_flash_speed will cause infinite and repeated flashing in auto_flash_color if nonzero and controls the speed of this flashing.
// auto_flash_bound1 and auto_flash_bound2 provide the bounds of the flashing effect.
// To prevent the auto flash from starting in the middle of the animation, set auto_flash_start_time to the global time when enabling auto flash.
// TIP - auto flash and regular ('manual') flash stack, which is why they have two separate colors.
uniform vec3 auto_flash_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float auto_flash_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flash_bound1: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flash_bound2: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flash_start_time = 0.0;

// COLOR CORRECTION
group_uniforms ColorCorrection;
// Applies red, green, or blue color correction with red_correct, green_correct, and blue_correct. 
// Applies grayscale with gray_correct.
// Modify brightness, contrast, or saturation with brightness_correct, contrast_correct, and saturation_correct.
// TIP - these values can actually go higher or lower, if you want a more extreme effect
uniform float red_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float green_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float blue_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float gray_correct: hint_range(-1.0, 1.0, 0.01) = 0.0;
uniform float brightness_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float contrast_correct: hint_range(0.0, 5.0, 0.01) = 1.0;
uniform float saturation_correct: hint_range(0.0, 2.0, 0.01) = 1.0;

// TODO - more funky color options
// rg swap - swaps the original (before any other swaps) value of r and g
// gb swap
// br swap
// r_eq_g - sets r = g
// r_eq_b
// g_eq_r
// g_eq_b
// b_eq_r
// b_eq_g

// TODO - ROUGHEN - applies randomized brightness modifications across the texture (both positive and negative) to 'roughen' it up

// SCANLINES
// Create a line across the canvas of scanline_color. scanline_strength controls the alpha of the line.
// Define the position of the line with scanline_left_to_right_position, scanline_top_to_bottom_position,
// scanline_topleft_to_bottomright_position, and scanline_topright_to_bottomleft_position.
// The line is vertical if going left to right, horizontal if going top to bottom, and diagonal for the other two.
group_uniforms Scanline;
uniform vec3 scanline_color: source_color = vec3(0.98, 0.69, 0.23);
uniform float scanline_strength: hint_range(0.0, 1.0, 0.01) = 1.0;
uniform float scanline_left_to_right_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_top_to_bottom_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topleft_to_bottomright_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
uniform float scanline_topright_to_bottomleft_position: hint_range(-0.001, 1.0, 0.001) = -0.001;
// auto_scanline_DIRECTION_on will enable automatic repeating scanlines in that direction.
// auto_scanline_DIRECTION_reverse will flip the direction.
// The scan will be visible for auto_scanline_DIRECTION_scan_duration, with a delay of 
// auto_scanline_DIRECTION_scan_duration before the next scan begins.
// To prevent the scanline from starting in the middle of the texture, provide the global time to auto_scanline_DIRECTION_start_time.
uniform bool auto_scanline_left_to_right_on = false;
uniform bool auto_scanline_left_to_right_reverse = false;
uniform float auto_scanline_left_to_right_start_time = 0.0;
uniform float auto_scanline_left_to_right_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_left_to_right_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_top_to_bottom_on = false;
uniform bool auto_scanline_top_to_bottom_reverse = false;
uniform float auto_scanline_top_to_bottom_start_time = 0.0;
uniform float auto_scanline_top_to_bottom_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_top_to_bottom_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topleft_to_bottomright_on = false;
uniform bool auto_scanline_topleft_to_bottomright_reverse = false;
uniform float auto_scanline_topleft_to_bottomright_start_time = 0.0;
uniform float auto_scanline_topleft_to_bottomright_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topleft_to_bottomright_delay: hint_range(0.0, 10.0, 0.01) = 1.0;
uniform bool auto_scanline_topright_to_bottomleft_on = false;
uniform bool auto_scanline_topright_to_bottomleft_reverse = false;
uniform float auto_scanline_topright_to_bottomleft_start_time = 0.0;
uniform float auto_scanline_topright_to_bottomleft_scan_duration: hint_range(0.1, 5.0, 0.01) = 0.5;
uniform float auto_scanline_topright_to_bottomleft_delay: hint_range(0.0, 10.0, 0.01) = 1.0;

// OUTLINE
// Adds a pixel outline to the texture, with glow_color and glow_thickness.
// glow_dialgonals controls if we also create this outline diagonally, which makes it thicker.
// This can be used to create a solid outline if auto_glow_speed is left at 0.
// WARNING - Shaders cannot draw outside of the bounds of the canvas, so the canvas may need extra transparent space on the sides.
// WARNING - Can have some odd effects with sprites containing partial transparency.
group_uniforms GlowAndOutline;
uniform vec4 glow_color: source_color = vec4(1.0);
uniform int glow_thickness: hint_range(0, 10) = 0;
uniform bool glow_diagonals = false;
// auto_glow_speed defines the speed of a glow fluctuating alpha between the outline's alpha and auto_glow_bound at auto_glow_speed.
// To prevent the auto glow from starting in the middle of the animation, set auto_glow_start_time to the global time when enabling auto glow.
uniform float auto_glow_speed: hint_range(0.0, 30.0) = 0.0;
uniform float auto_glow_bound: hint_range(0.0, 1.0) = 0.75;
uniform float auto_glow_start_time = 0.0;

// DISINTEGRATE
// Sets 'random' pixels in the canvas to disintegrate_color with alpha between disintegrate_alpha_bound1 and disintegrate_alpha_bound2.
// By default, since these bounds are 0, the pixels will be made fully transparent and therefore disintegrate_color is unused.
// disintegrate_strength controls the amount of pixels affected, from none (0) to all of them (1).
// Change the pattern via disintegrate_seed.
// disintegrate_as_static changes the purpose of disintegrate to not affect the alpha of the texture.
// Instead, it layers a static-looking pattern on top using disintegrate_color, where the color is based on disintegrate_color
// and the alpha of the static pattern ranges randomly between disintegrate_alpha_bound1 and disintegrate_alpha_bound2 per pixel.
// Note that with the default bounds of 0 and 0, this setting creates no effect whatsoever.
// If auto_disintegrate_random_seed_speed is nonzero, applies randomization to the seed over time based on speed.
// In this case, disintegrate_seed has no effect.
group_uniforms Disintegrate;
uniform int disintegrate_seed = 1;
uniform vec3 disintegrate_color : source_color = vec3(0.0, 0.0, 0.0);
uniform float disintegrate_strength: hint_range(0.0, 1.0) = 0.0;
uniform float disintegrate_alpha_bound1 = 0.0;
uniform float disintegrate_alpha_bound2 = 0.0;
uniform bool disintegrate_as_static = false;
uniform float auto_disintegrate_random_seed_speed: hint_range(0.0, 1.0) = 0.0;

// FOG
// Applies a fog_noise_texture filter over the texture with modifiable fog_opacity and fog_density, moving at fog_speed
// Mostly used to create fog effects by assigning to a ColorRect (color is changable by changing ColorRect color too!)
// NOTE - Don't use this as a post processing shader. 
group_uniforms Fog;
uniform bool fog_enabled = false;
uniform sampler2D fog_noise_texture: repeat_enable, filter_nearest;
uniform float fog_opacity: hint_range(0.0, 1.0) = 0.5;
uniform float fog_density: hint_range(0.0, 1.0) = 0.25;
uniform vec2 fog_speed = vec2(-0.02, 0.0);

// COLORLINES
// Creates vertical/horizontal lines of colorline_color spaced colorline_spacing pixels apart 
// with colorline_strength alpha across the texture.
group_uniforms Colorlines;
uniform vec3 vertical_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int vertical_colorline_spacing = 2;
uniform float vertical_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;
uniform vec3 horizontal_colorline_color: source_color = vec3(1.0, 1.0, 1.0);
uniform int horizontal_colorline_spacing = 2;
uniform float horizontal_colorline_strength: hint_range(0.0, 1.0, 0.01) = 0.0;

// CHECKER
// Creates a checkerboard pattern across the texture of checker_color with checker_strength alpha.
// checker_x_size and checker_y_size defines the size of each rectangular checker
// checker_x_pattern and checker_y_pattern affect the pattern of the checker pattern (which
// can stop looking checkered with different values).
// checker_contrast_amount applies a darkening effect to pixels of the checkerboard that are already dark.
// checker_contrast_ratio increases the contrast of the darkening effect between light and dark colored pixels,
// ie dark pixels become even darker.
group_uniforms CHECKER;
uniform vec3 checker_color: source_color = vec3(0.2, 0.2, 0.2);
uniform float checker_strength: hint_range(0.0, 1.0, 0.01) = 0.0; //0.3 is a good one
uniform int checker_x_size: hint_range(1, 64, 1) = 1;
uniform int checker_y_size: hint_range(1, 64, 1) = 1;
uniform int checker_x_pattern: hint_range(1, 32, 1) = 2;
uniform int checker_y_pattern: hint_range(1, 32, 1) = 2;
uniform float checker_contrast_amount: hint_range(-10.0, 10.0, 0.1) = 1.0;
uniform float checker_contrast_ratio: hint_range(0.0, 10.0, 0.01) = 0.5;
// TODO - experiment a bit more with the contrast calculation here - maybe subtract 0.5 and LIGHTEN lighter areas?

// MOUSELIGHT
// Creates a circular lighting effect at the mouse's position if mouselight_on, of mouselight_color and mouselight_strength alpha.
// Mouselight size defines the radius of the light effect.
// If mouselight_soften_edges, pixels further from the center of the light are more transparent.
// If mouselight_checker, the effect will be checkered in a way that interacts with the CHECKER effect.
// If auto_mouselight_flicker_speed is non-zero, the light will oscillate in size between mouselight_size and auto_mouselight_flicker_speed
group_uniforms Mouselight;
uniform bool mouselight_on = false;
uniform vec3 mouselight_color: source_color = vec3(1.0, 1.0, 1.0);
uniform float mouselight_strength = 0.5;
uniform int mouselight_size = 8;
uniform bool mouselight_soften_edges = true;
uniform bool mouselight_checker = false;
uniform float auto_mouselight_flicker_speed: hint_range(0.0, 20.0) = 8;
uniform float auto_mouselight_flicker_bound = 10;

// CUT
// Cuts off all pixels of the texture from left/right/top/bottom.
group_uniforms Cut;
uniform float cut_left: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_right: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_top: hint_range(0.0, 1.0, 0.001) = 0.0;
uniform float cut_bottom: hint_range(0.0, 1.0, 0.001) = 0.0;

// VIGNETTE
// Applies a circular vignette effect on the canvas if vignette_on.
// The vignette has a vignette_radius and a vignette_color.
// If vignette_ignore_transparent, transparent pixels will not have the vignette applied.
// This is generally useful if you want to apply a vignette on something besides the entire screen.
// Radius -> 0 tends to do some crazy effects
group_uniforms Vignette;
uniform bool vignette_on = false;
uniform bool vignette_ignore_transparent = false;
uniform vec3 vignette_color: source_color = vec3(0.0, 0.0, 0.0);
uniform float vignette_radius: hint_range(0.001, 20.0, 0.01) = 1.0;

// TRANSPARENCY
// Controls transparency of the texture.
// If auto_flicker_speed is not zero, oscillates between transparency and auto_flicker_bounds at auto_flicker_speed.
// To prevent the auto flicker from starting in the middle of the animation, set auto_flicker_start_time to the global time when enabling auto flicker.
group_uniforms Transparency;
uniform float transparency: hint_range(0.0, 1.0) = 1.0;
uniform float auto_flicker_speed: hint_range(0.0, 20.0) = 0.0;
uniform float auto_flicker_bound: hint_range(0.0, 1.0) = 0.0;
uniform float auto_flicker_start_time = 0.0;

// --- Fragment Shader --- //
void fragment() 
{
	if (!DISABLE) {
	
	COLOR = texture(TEXTURE, UV);
	
	// --- CALCULATE CONSTANTS ---
	// WARNING - Don't use the ones with _ directly. 
	// the size of this canvas in pixels (ex 10x10)
	int _SIZE_IN_PIXELS_X = int(floor(1.0 / TEXTURE_PIXEL_SIZE.x));
	int _SIZE_IN_PIXELS_Y = int(floor(1.0 / TEXTURE_PIXEL_SIZE.y));
	// the size of the screen in pixels (ex 320x180)
	int _SCREEN_SIZE_IN_PIXELS_X = int(floor(1.0 / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_SIZE_IN_PIXELS_Y = int(floor(1.0 / SCREEN_PIXEL_SIZE.y));
	
	// the specific x and y pixel coordinates within texture
	int _PIXEL_X = int(floor(UV.x / TEXTURE_PIXEL_SIZE.x));
	int _PIXEL_Y = int(floor(UV.y / TEXTURE_PIXEL_SIZE.y));
	// the specific x and y pixel coordinates within screen
	int _SCREEN_PIXEL_X = int(floor(SCREEN_UV.x / SCREEN_PIXEL_SIZE.x));
	int _SCREEN_PIXEL_Y = int(floor(SCREEN_UV.y / SCREEN_PIXEL_SIZE.y));
	
	// WARNING - Use these instead. This accounts for if this is a normal or post processing shader.
	// Size of a pixel for this canvas (ie 1/320x1/180)
	float PIXEL_SIZE_X = POST_PROCESSING ? SCREEN_PIXEL_SIZE.x : TEXTURE_PIXEL_SIZE.x;
	float PIXEL_SIZE_Y = POST_PROCESSING ? SCREEN_PIXEL_SIZE.y : TEXTURE_PIXEL_SIZE.y;
	// Size of the canvas in pixels. (ex 320x180)
	int SIZE_IN_PIXELS_X = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_X : _SIZE_IN_PIXELS_X;
	int SIZE_IN_PIXELS_Y = POST_PROCESSING ? _SCREEN_SIZE_IN_PIXELS_Y : _SIZE_IN_PIXELS_Y;
	// The specific XY coordinates of the current pixel.
	int X = POST_PROCESSING ? _SCREEN_PIXEL_X : _PIXEL_X;
	int Y = POST_PROCESSING ? _SCREEN_PIXEL_Y : _PIXEL_Y;
	// UV coordinates of the current pixel.
	vec2 MUV = POST_PROCESSING ? SCREEN_UV : UV;
	// ---
	
	
	// DISPLACE & PAN
	vec2 adjUV = vec2(0, 0); // WARNING - Use this instead of UV below, otherwise effects break with panning & displace
	
	float displaceUVX = MUV.x + (SCREEN_PIXEL_SIZE.x * float(displace_x));
	float displaceUVY = MUV.y + (SCREEN_PIXEL_SIZE.y * float(displace_y));
	if (displace_repeat) {
		adjUV = mod(vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed, 1.00000);
	} else {
		adjUV = vec2(displaceUVX, displaceUVY) + TIME * auto_pan_speed;
	}
	
	// $HACK$ doing this as a ternary breaks the preview, for some reason
	if (POST_PROCESSING) 
		COLOR = texture(SCREEN_TEXTURE, adjUV);
	else 
		COLOR = texture(TEXTURE, adjUV);
	
	// EXCLUDE COLORS
	bool is_exclude_color = use_exclude_colors && (vec3eq(COLOR.rgb, exclude_color1) || vec3eq(COLOR.rgb, exclude_color2) || vec3eq(COLOR.rgb, exclude_color3) || vec3eq(COLOR.rgb, exclude_color4) || vec3eq(COLOR.rgb, exclude_color5) || vec3eq(COLOR.rgb, exclude_color6) || vec3eq(COLOR.rgb, exclude_color7) || vec3eq(COLOR.rgb, exclude_color8));
	
	// RECOLOR
	if (vec3eq(COLOR.rgb, replace_color1)) 
		COLOR.rgb = replace_with_color1;
	if (vec3eq(COLOR.rgb, replace_color2)) 
		COLOR.rgb = replace_with_color2;
	if (vec3eq(COLOR.rgb, replace_color3)) 
		COLOR.rgb = replace_with_color3;
	if (vec3eq(COLOR.rgb, replace_color4)) 
		COLOR.rgb = replace_with_color4;
	if (vec3eq(COLOR.rgb, replace_color5)) 
		COLOR.rgb = replace_with_color5;
	if (vec3eq(COLOR.rgb, replace_color_outline))
		COLOR.rgb = replace_with_color_outline;
	
	if (vec3eq(COLOR.rgb, auto_replace_color)) {
		vec3 replaced = auto_replace_color;
		if (auto_replace_replace_original_color)
			replaced = auto_replace_replace_original_color_with;
		COLOR.rgb  = mix(replaced, auto_replace_to_color, abs(vary0to1((TIME-auto_replace_start_time + TIME_OFFSET) * auto_replace_speed)));
	}
	
	// TINT, COLOR CORRECTION, and SCANLINE ignore excluded colors
	if (!is_exclude_color) {
		// TINT
		COLOR.rgb = mix(COLOR.rgb, tint_color, tint_strength);

		// FLASH
		// apply automatic flash
		if (auto_flash_speed != 0.0) {
			float auto_strength = mix(auto_flash_bound1, auto_flash_bound2, abs(vary0to1((TIME-auto_flash_start_time + TIME_OFFSET) * auto_flash_speed)));
			COLOR.rgb = mix(COLOR.rgb, auto_flash_color, auto_strength);
		}
		// apply manual flash
		COLOR.rgb = mix(COLOR.rgb, flash_color, flash_strength);

		// COLOR CORRECTION
		COLOR.r = mix(COLOR.r, 1.0, red_correct);
		COLOR.g = mix(COLOR.g, 1.0, green_correct);
		COLOR.b = mix(COLOR.b, 1.0, blue_correct);
		COLOR.rgb = mix(COLOR.rgb, vec3(0.2126 * COLOR.r + 0.7152 * COLOR.g + 0.0722 * COLOR.b), gray_correct);
		COLOR.rgb = mix(vec3(0.0), COLOR.rgb, brightness_correct);
		COLOR.rgb = mix(vec3(0.5), COLOR.rgb, contrast_correct);
		COLOR.rgb = mix(vec3(dot(vec3(1.0), COLOR.rbg)), COLOR.rgb, saturation_correct);

		// SCANLINE
		// FIX
		if (COLOR.a != 0.0) {
			float l_to_r_pos = !auto_scanline_left_to_right_on ? scanline_left_to_right_position : abs((auto_scanline_left_to_right_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_left_to_right_start_time + TIME_OFFSET, auto_scanline_left_to_right_delay + auto_scanline_left_to_right_scan_duration), 0.0, auto_scanline_left_to_right_scan_duration)/auto_scanline_left_to_right_scan_duration)));
			float t_to_b_pos = !auto_scanline_top_to_bottom_on ? scanline_top_to_bottom_position : abs((auto_scanline_top_to_bottom_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_top_to_bottom_start_time + TIME_OFFSET, auto_scanline_top_to_bottom_delay + auto_scanline_top_to_bottom_scan_duration), 0.0, auto_scanline_top_to_bottom_scan_duration)/auto_scanline_top_to_bottom_scan_duration)));
			float tl_to_br_pos = !auto_scanline_topleft_to_bottomright_on ? scanline_topleft_to_bottomright_position : abs((auto_scanline_topleft_to_bottomright_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topleft_to_bottomright_start_time + TIME_OFFSET, auto_scanline_topleft_to_bottomright_delay + auto_scanline_topleft_to_bottomright_scan_duration), 0.0, auto_scanline_topleft_to_bottomright_scan_duration)/auto_scanline_topleft_to_bottomright_scan_duration)));
			float tr_to_bl_pos = !auto_scanline_topright_to_bottomleft_on ? scanline_topright_to_bottomleft_position : abs((auto_scanline_topright_to_bottomleft_reverse ? 1.0 : 0.0) - mix(0.0, 1.0, float(clamp(mod(TIME - auto_scanline_topright_to_bottomleft_start_time + TIME_OFFSET, auto_scanline_topright_to_bottomleft_delay + auto_scanline_topright_to_bottomleft_scan_duration), 0.0, auto_scanline_topright_to_bottomleft_scan_duration)/auto_scanline_topright_to_bottomleft_scan_duration)));

			if (X == int(floor(l_to_r_pos / float(PIXEL_SIZE_X))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (Y == int(floor(t_to_b_pos / float(PIXEL_SIZE_Y))))
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			int scanline_target_tlbr = int(floor(tl_to_br_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y)));
			int scanline_target_trbl = int(floor(tr_to_bl_pos * float(SIZE_IN_PIXELS_X + SIZE_IN_PIXELS_Y))) - SIZE_IN_PIXELS_Y;
			if (X+Y == scanline_target_tlbr)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
			if (X-Y == scanline_target_trbl)
				COLOR.rgb = mix(COLOR.rgb, scanline_color, scanline_strength);
		}
	}

	// GLOW
	if (glow_thickness != 0) {
		vec2 outline_size = TEXTURE_PIXEL_SIZE * float(glow_thickness);
		float outline = 0.0;
		for (int i = 0; i < HORIZONTAL_VERTICAL_OFFSETS.length(); i++) {
			outline += texture(TEXTURE, adjUV + outline_size * HORIZONTAL_VERTICAL_OFFSETS[i]).a;
		}
		if (glow_diagonals) {
			for (int i = 0; i < DIAGONAL_OUTLINE_OFFSETS.length(); i++) {
				outline += texture(TEXTURE, adjUV + outline_size * DIAGONAL_OUTLINE_OFFSETS[i]).a;
			}
		}
		outline = min(outline, 1.0);
		// this is a bit of a coding $HACK$ to make auto_glow_bound do nothing if auto_glow_speed is 0, but it definitely works
		float alp = auto_glow_speed == 0.0 ? 1.0 : mix(auto_glow_bound, glow_color.a, vary0to1((TIME - auto_glow_start_time + TIME_OFFSET) * auto_glow_speed));
		COLOR = mix(COLOR, glow_color * alp, outline - COLOR.a);
	}

	// DISINTEGRATE
	if (!is_exclude_color && COLOR.a != 0.0) {
		vec2 s = adjUV * vec2(float(disintegrate_seed));
		s *= auto_disintegrate_random_seed_speed != 0.0 ? float(int(TIME / mix(1.0, 0.001, auto_disintegrate_random_seed_speed))) : 1.0;
		float r = random(s);
		if (r < disintegrate_strength) {
			float r_alpha = randf_range(s, disintegrate_alpha_bound1, disintegrate_alpha_bound2);
			COLOR.rgb = mix(COLOR.rgb, disintegrate_color, r_alpha);
			if (!disintegrate_as_static)
				COLOR.a = r_alpha;
		}
	}

	// FOG
	if (fog_enabled) {
		vec2 fog_uv = MUV + fog_speed * TIME;
		float noise_alpha = texture(fog_noise_texture, fog_uv).r;
		// Convert noise from (0.0, 1.0) to (-1.0, 1.0)
		float fog = clamp((noise_alpha * 2.0 - 1.0) + (fog_density * 2.0), 0.0, 1.0);
		COLOR.a *= fog * fog_opacity;
	}

	// COLORLINES	
	if (!is_exclude_color) {
		if (X % vertical_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, vertical_colorline_color, vertical_colorline_strength);
		}
		if (Y % horizontal_colorline_spacing == 0) {
			COLOR.rgb = mix(COLOR.rgb, horizontal_colorline_color, horizontal_colorline_strength);
		}
	}

	// CHECKER
	if (!is_exclude_color) {	
		if (X/checker_x_size % checker_x_pattern != Y/checker_y_size % checker_y_pattern) {
			float pixel_darkness = (3.0 - (COLOR.r + COLOR.g + COLOR.b)) * checker_contrast_ratio; // calculates 0.0 to 1.0 where 1.0 is pure black and 0.0 is pure white
			vec3 cbcolor = mix(checker_color.rgb, vec3(0.0), pixel_darkness * checker_contrast_amount);
			COLOR.rgb = mix(COLOR.rgb, cbcolor, checker_strength);
		}
	}

	// MOUSELIGHT
	if (mouselight_on && (!mouselight_checker || X % 2 == Y % 2)) {
		float mouse_with_flicker = mix(auto_mouselight_flicker_bound, float(mouselight_size), vary0to1(TIME * auto_mouselight_flicker_speed));
		float dist_from_mouse = sqrt(pow(float(_SCREEN_PIXEL_X - int(MOUSE.x)), 2.0) + pow(float(_SCREEN_PIXEL_Y - int(MOUSE.y)), 2.0));
		if (dist_from_mouse <= float(mouse_with_flicker)) {
			//todo - make softening with distance optional as uniform
			float distance_mod = clamp((mouse_with_flicker - dist_from_mouse) / mouse_with_flicker, 0.0, 1.0);
			COLOR.rgb = mix(COLOR.rgb, mouselight_color, distance_mod * mouselight_strength);
		}
	}

	// CUT
	if (MUV.x < cut_left)
		COLOR.a = 0.0;
	if (MUV.x > 1.0-cut_right)
		COLOR.a = 0.0;
	if (MUV.y < cut_top)
		COLOR.a = 0.0;
	if (MUV.y > 1.0-cut_bottom)
		COLOR.a = 0.0;

	// VIGNETTE
	if (vignette_on && ((!vignette_ignore_transparent || COLOR.a != 0.0)) && !is_exclude_color) {
		float x = abs(adjUV.x-.5)*2.0;
		float y = abs(adjUV.y-.5)*2.0;
		float v = (sqrt((x*x)+(y*y))/vignette_radius);
		COLOR = mix(COLOR, vec4(vignette_color.r, vignette_color.g, vignette_color.b, 1.0), v);
	}

	// TRANSPARENCY
	if (COLOR.a != 0.0) {
		COLOR.a = mix(COLOR.a * transparency, auto_flicker_bound, vary0to1((TIME-auto_flicker_start_time + TIME_OFFSET) * auto_flicker_speed));
	}
	
	} //end if disable
}

void vertex()
{
	
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_2t5ef"]
resource_local_to_scene = true
shader = SubResource("Shader_iaxjw")
shader_parameter/POST_PROCESSING = false
shader_parameter/MOUSE = Vector2(20, 20)
shader_parameter/DISABLE = false
shader_parameter/use_exclude_colors = true
shader_parameter/exclude_color1 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color2 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color3 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color4 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color5 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color6 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color7 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color8 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/displace_x = 0
shader_parameter/displace_y = 0
shader_parameter/displace_repeat = true
shader_parameter/auto_pan_speed = Vector2(0, 0)
shader_parameter/replace_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/replace_with_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/auto_replace_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_replace_original_color = false
shader_parameter/auto_replace_replace_original_color_with = Color(0, 0, 0, 1)
shader_parameter/auto_replace_to_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_speed = 0.0
shader_parameter/auto_replace_start_time = 0.0
shader_parameter/tint_color = Color(0, 0, 0, 1)
shader_parameter/tint_strength = 0.0
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0
shader_parameter/auto_flash_color = Color(1, 1, 1, 1)
shader_parameter/auto_flash_speed = 0.0
shader_parameter/auto_flash_bound1 = 0.0
shader_parameter/auto_flash_bound2 = 1.0
shader_parameter/auto_flash_start_time = 0.0
shader_parameter/red_correct = 0.0
shader_parameter/green_correct = 0.0
shader_parameter/blue_correct = 0.0
shader_parameter/gray_correct = 0.0
shader_parameter/brightness_correct = 1.0
shader_parameter/contrast_correct = 1.0
shader_parameter/saturation_correct = 1.0
shader_parameter/scanline_color = Color(0.98, 0.69, 0.23, 1)
shader_parameter/scanline_strength = 1.0
shader_parameter/scanline_left_to_right_position = -0.001
shader_parameter/scanline_top_to_bottom_position = -0.001
shader_parameter/scanline_topleft_to_bottomright_position = -0.001
shader_parameter/scanline_topright_to_bottomleft_position = -0.001
shader_parameter/auto_scanline_left_to_right_on = false
shader_parameter/auto_scanline_left_to_right_reverse = false
shader_parameter/auto_scanline_left_to_right_start_time = 0.0
shader_parameter/auto_scanline_left_to_right_scan_duration = 0.5
shader_parameter/auto_scanline_left_to_right_delay = 1.0
shader_parameter/auto_scanline_top_to_bottom_on = false
shader_parameter/auto_scanline_top_to_bottom_reverse = false
shader_parameter/auto_scanline_top_to_bottom_start_time = 0.0
shader_parameter/auto_scanline_top_to_bottom_scan_duration = 0.5
shader_parameter/auto_scanline_top_to_bottom_delay = 1.0
shader_parameter/auto_scanline_topleft_to_bottomright_on = false
shader_parameter/auto_scanline_topleft_to_bottomright_reverse = false
shader_parameter/auto_scanline_topleft_to_bottomright_start_time = 0.0
shader_parameter/auto_scanline_topleft_to_bottomright_scan_duration = 0.5
shader_parameter/auto_scanline_topleft_to_bottomright_delay = 1.0
shader_parameter/auto_scanline_topright_to_bottomleft_on = false
shader_parameter/auto_scanline_topright_to_bottomleft_reverse = false
shader_parameter/auto_scanline_topright_to_bottomleft_start_time = 0.0
shader_parameter/auto_scanline_topright_to_bottomleft_scan_duration = 0.5
shader_parameter/auto_scanline_topright_to_bottomleft_delay = 1.0
shader_parameter/glow_color = Color(1, 1, 1, 1)
shader_parameter/glow_thickness = 0
shader_parameter/glow_diagonals = false
shader_parameter/auto_glow_speed = 0.0
shader_parameter/auto_glow_bound = 0.75
shader_parameter/auto_glow_start_time = 0.0
shader_parameter/disintegrate_seed = 1
shader_parameter/disintegrate_color = Color(0, 0, 0, 1)
shader_parameter/disintegrate_strength = 0.0
shader_parameter/disintegrate_alpha_bound1 = 0.0
shader_parameter/disintegrate_alpha_bound2 = 0.0
shader_parameter/disintegrate_as_static = false
shader_parameter/auto_disintegrate_random_seed_speed = 0.0
shader_parameter/fog_enabled = false
shader_parameter/fog_opacity = 0.5
shader_parameter/fog_density = 0.25
shader_parameter/fog_speed = Vector2(-0.02, 0)
shader_parameter/vertical_colorline_color = Color(1, 1, 1, 1)
shader_parameter/vertical_colorline_spacing = 2
shader_parameter/vertical_colorline_strength = 0.0
shader_parameter/horizontal_colorline_color = Color(1, 1, 1, 1)
shader_parameter/horizontal_colorline_spacing = 2
shader_parameter/horizontal_colorline_strength = 0.0
shader_parameter/checker_color = Color(0.2, 0.2, 0.2, 1)
shader_parameter/checker_strength = 0.0
shader_parameter/checker_x_size = 1
shader_parameter/checker_y_size = 1
shader_parameter/checker_x_pattern = 2
shader_parameter/checker_y_pattern = 2
shader_parameter/checker_contrast_amount = 1.0
shader_parameter/checker_contrast_ratio = 0.5
shader_parameter/mouselight_on = false
shader_parameter/mouselight_color = Color(1, 1, 1, 1)
shader_parameter/mouselight_strength = 0.5
shader_parameter/mouselight_size = 8
shader_parameter/mouselight_soften_edges = true
shader_parameter/mouselight_checker = false
shader_parameter/auto_mouselight_flicker_speed = 8.0
shader_parameter/auto_mouselight_flicker_bound = 10.0
shader_parameter/cut_left = 0.0
shader_parameter/cut_right = 0.0
shader_parameter/cut_top = 0.0
shader_parameter/cut_bottom = 0.0
shader_parameter/vignette_on = false
shader_parameter/vignette_ignore_transparent = false
shader_parameter/vignette_color = Color(0, 0, 0, 1)
shader_parameter/vignette_radius = 1.0
shader_parameter/transparency = 1.0
shader_parameter/auto_flicker_speed = 0.0
shader_parameter/auto_flicker_bound = 0.0
shader_parameter/auto_flicker_start_time = 0.0

[sub_resource type="SpriteFrames" id="SpriteFrames_cpm7a"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": ExtResource("33_byqkj")
}],
"loop": false,
"name": &"heads",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": ExtResource("34_bwsju")
}],
"loop": true,
"name": &"tails",
"speed": 5.0
}, {
"frames": [],
"loop": true,
"name": &"trial",
"speed": 5.0
}]

[sub_resource type="ShaderMaterial" id="ShaderMaterial_kikpk"]
shader = ExtResource("2_14jmd")
shader_parameter/LABEL = false
shader_parameter/POST_PROCESSING = false
shader_parameter/MOUSE = Vector2(20, 20)
shader_parameter/DISABLE = false
shader_parameter/use_exclude_colors = true
shader_parameter/exclude_color1 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color2 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color3 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color4 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color5 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color6 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color7 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/exclude_color8 = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/displace_x = 0
shader_parameter/displace_y = 0
shader_parameter/displace_repeat = true
shader_parameter/auto_pan_speed = Vector2(0, 0)
shader_parameter/replace_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color1 = Color(0, 0, 0, 1)
shader_parameter/replace_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color2 = Color(0, 0, 0, 1)
shader_parameter/replace_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color3 = Color(0, 0, 0, 1)
shader_parameter/replace_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color4 = Color(0, 0, 0, 1)
shader_parameter/replace_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_with_color5 = Color(0, 0, 0, 1)
shader_parameter/replace_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/replace_with_color_outline = Color(0.0784314, 0.0627451, 0.0745098, 1)
shader_parameter/auto_replace_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_replace_original_color = false
shader_parameter/auto_replace_replace_original_color_with = Color(0, 0, 0, 1)
shader_parameter/auto_replace_to_color = Color(0, 0, 0, 1)
shader_parameter/auto_replace_speed = 0.0
shader_parameter/auto_replace_start_time = 0.0
shader_parameter/tint_color = Color(0, 0, 0, 1)
shader_parameter/tint_strength = 0.0
shader_parameter/flash_color = Color(1, 1, 1, 1)
shader_parameter/flash_strength = 0.0
shader_parameter/auto_flash_color = Color(1, 1, 1, 1)
shader_parameter/auto_flash_speed = 0.0
shader_parameter/auto_flash_bound1 = 0.0
shader_parameter/auto_flash_bound2 = 1.0
shader_parameter/auto_flash_start_time = 0.0
shader_parameter/red_correct = 0.0
shader_parameter/green_correct = 0.0
shader_parameter/blue_correct = 0.0
shader_parameter/gray_correct = 0.0
shader_parameter/brightness_correct = 1.0
shader_parameter/contrast_correct = 1.0
shader_parameter/saturation_correct = 1.0
shader_parameter/scanline_color = Color(0.98, 0.69, 0.23, 1)
shader_parameter/scanline_strength = 1.0
shader_parameter/scanline_left_to_right_position = -0.001
shader_parameter/scanline_top_to_bottom_position = -0.001
shader_parameter/scanline_topleft_to_bottomright_position = -0.001
shader_parameter/scanline_topright_to_bottomleft_position = -0.001
shader_parameter/auto_scanline_left_to_right_on = false
shader_parameter/auto_scanline_left_to_right_reverse = false
shader_parameter/auto_scanline_left_to_right_start_time = 0.0
shader_parameter/auto_scanline_left_to_right_scan_duration = 0.5
shader_parameter/auto_scanline_left_to_right_delay = 1.0
shader_parameter/auto_scanline_top_to_bottom_on = false
shader_parameter/auto_scanline_top_to_bottom_reverse = false
shader_parameter/auto_scanline_top_to_bottom_start_time = 0.0
shader_parameter/auto_scanline_top_to_bottom_scan_duration = 0.5
shader_parameter/auto_scanline_top_to_bottom_delay = 1.0
shader_parameter/auto_scanline_topleft_to_bottomright_on = false
shader_parameter/auto_scanline_topleft_to_bottomright_reverse = false
shader_parameter/auto_scanline_topleft_to_bottomright_start_time = 0.0
shader_parameter/auto_scanline_topleft_to_bottomright_scan_duration = 0.5
shader_parameter/auto_scanline_topleft_to_bottomright_delay = 1.0
shader_parameter/auto_scanline_topright_to_bottomleft_on = false
shader_parameter/auto_scanline_topright_to_bottomleft_reverse = false
shader_parameter/auto_scanline_topright_to_bottomleft_start_time = 0.0
shader_parameter/auto_scanline_topright_to_bottomleft_scan_duration = 0.5
shader_parameter/auto_scanline_topright_to_bottomleft_delay = 1.0
shader_parameter/glow_color = Color(1, 1, 1, 1)
shader_parameter/glow_thickness = 0
shader_parameter/glow_diagonals = false
shader_parameter/auto_glow_speed = 0.0
shader_parameter/auto_glow_bound = 0.75
shader_parameter/auto_glow_start_time = 0.0
shader_parameter/disintegrate_seed = 1
shader_parameter/disintegrate_color = Color(0, 0, 0, 1)
shader_parameter/disintegrate_strength = 0.0
shader_parameter/disintegrate_alpha_bound1 = 0.0
shader_parameter/disintegrate_alpha_bound2 = 0.0
shader_parameter/disintegrate_as_static = false
shader_parameter/auto_disintegrate_random_seed_speed = 0.0
shader_parameter/fog_enabled = false
shader_parameter/fog_opacity = 0.5
shader_parameter/fog_density = 0.25
shader_parameter/fog_speed = Vector2(-0.02, 0)
shader_parameter/vertical_colorline_color = Color(1, 1, 1, 1)
shader_parameter/vertical_colorline_spacing = 2
shader_parameter/vertical_colorline_strength = 0.0
shader_parameter/horizontal_colorline_color = Color(1, 1, 1, 1)
shader_parameter/horizontal_colorline_spacing = 2
shader_parameter/horizontal_colorline_strength = 0.0
shader_parameter/checker_color = Color(0.2, 0.2, 0.2, 1)
shader_parameter/checker_strength = 0.0
shader_parameter/checker_x_size = 1
shader_parameter/checker_y_size = 1
shader_parameter/checker_x_pattern = 2
shader_parameter/checker_y_pattern = 2
shader_parameter/checker_contrast_amount = 1.0
shader_parameter/checker_contrast_ratio = 0.5
shader_parameter/mouselight_on = false
shader_parameter/mouselight_color = Color(1, 1, 1, 1)
shader_parameter/mouselight_strength = 0.5
shader_parameter/mouselight_size = 8
shader_parameter/mouselight_soften_edges = true
shader_parameter/mouselight_checker = false
shader_parameter/auto_mouselight_flicker_speed = 8.0
shader_parameter/auto_mouselight_flicker_bound = 10.0
shader_parameter/cut_left = 0.0
shader_parameter/cut_right = 0.0
shader_parameter/cut_top = 0.0
shader_parameter/cut_bottom = 0.0
shader_parameter/vignette_on = false
shader_parameter/vignette_ignore_transparent = false
shader_parameter/vignette_color = Color(0, 0, 0, 1)
shader_parameter/vignette_radius = 1.0
shader_parameter/transparency = 0.75
shader_parameter/auto_flicker_speed = 5.0
shader_parameter/auto_flicker_bound = 1.0
shader_parameter/auto_flicker_start_time = 0.0

[node name="Coin" type="Control"]
custom_minimum_size = Vector2(34, 44)
layout_mode = 3
anchors_preset = 0
offset_right = 34.0
offset_bottom = 44.0
mouse_filter = 2
script = ExtResource("1_eg3xp")

[node name="Clickbox" type="CollisionPolygon2D" parent="."]
position = Vector2(-8, -7)
polygon = PackedVector2Array(29, 9, 32, 10, 34, 11, 37, 14, 38, 16, 39, 19, 39, 29, 38, 32, 37, 34, 34, 37, 32, 38, 29, 39, 21, 39, 18, 38, 16, 37, 13, 34, 12, 32, 11, 29, 11, 19, 12, 16, 13, 14, 16, 11, 18, 10, 21, 9)

[node name="Sprite" type="AnimatedSprite2D" parent="."]
material = SubResource("ShaderMaterial_tte34")
sprite_frames = SubResource("SpriteFrames_w12pp")
animation = &"labyrinth_obol_flat"
centered = false

[node name="ProteusOverlay" type="Sprite2D" parent="Sprite"]
visible = false
texture = ExtResource("4_5g7if")
centered = false

[node name="FaceLabel" type="RichTextLabel" parent="Sprite"]
texture_filter = 1
offset_left = 3.0
offset_top = 9.0
offset_right = 33.0
offset_bottom = 23.0
mouse_filter = 2
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
bbcode_enabled = true
text = "[center][color=#b3b9d1]1[img=10x13]res://assets/icons/soul_fragment_blue_icon.png[/img][/color][/center]"
fit_content = true
scroll_active = false

[node name="InfoView" type="Node2D" parent="Sprite"]

[node name="HeadsIcon" type="RichTextLabel" parent="Sprite/InfoView"]
texture_filter = 1
material = SubResource("ShaderMaterial_3cyj1")
offset_left = -4.0
offset_top = 9.0
offset_right = 26.0
offset_bottom = 23.0
mouse_filter = 2
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
bbcode_enabled = true
text = "[center][img=10x13]res://assets/icons/soul_fragment_blue_icon.png[/img][/center]"
fit_content = true
scroll_active = false

[node name="FX" parent="Sprite/InfoView/HeadsIcon" instance=ExtResource("17_tmr1x")]

[node name="TailsIcon" type="RichTextLabel" parent="Sprite/InfoView"]
texture_filter = 1
material = SubResource("ShaderMaterial_82nyx")
offset_left = 7.0
offset_top = 9.0
offset_right = 37.0
offset_bottom = 23.0
mouse_filter = 2
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
bbcode_enabled = true
text = "[center][color=#b3b9d1][img=10x13]res://assets/icons/soul_fragment_blue_icon.png[/img][/color][/center]"
fit_content = true
scroll_active = false

[node name="FX" parent="Sprite/InfoView/TailsIcon" instance=ExtResource("17_tmr1x")]

[node name="FaceIndicator" type="AnimatedSprite2D" parent="Sprite/InfoView"]
material = SubResource("ShaderMaterial_2t5ef")
position = Vector2(1, -2)
sprite_frames = SubResource("SpriteFrames_cpm7a")
animation = &"heads"
centered = false
script = ExtResource("7_ooodo")

[node name="FX" parent="Sprite/InfoView/FaceIndicator" instance=ExtResource("17_tmr1x")]

[node name="FX" parent="Sprite" instance=ExtResource("17_tmr1x")]

[node name="Price" type="RichTextLabel" parent="Sprite"]
texture_filter = 1
clip_contents = false
custom_minimum_size = Vector2(0, 10)
offset_left = -7.0
offset_top = -14.0
offset_right = 45.0
theme_override_colors/font_outline_color = Color(0, 0, 0, 1)
theme_override_constants/outline_size = 4
bbcode_enabled = true
text = "[center][color=#e12f3b]50[/color][img=10x13]res://assets/icons/soul_fragment_blue_icon.png[/img]"
scroll_active = false
autowrap_mode = 2

[node name="StatusBar" type="HBoxContainer" parent="Sprite"]
offset_left = 4.0
offset_top = 35.0
offset_right = 30.0
offset_bottom = 43.0
mouse_filter = 2
theme_override_constants/separation = 1
alignment = 1
script = ExtResource("22_i4xsq")

[node name="Blank" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_BLANKED)
(D_BLANKED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Blank"]
texture = ExtResource("23_ndo5s")
centered = false
offset = Vector2(-1, -3)

[node name="Stone" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_TURNED_TO_STONE)
(D_TURNED_TO_STONE)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Stone"]
texture = ExtResource("24_gdnx8")
centered = false
offset = Vector2(-1, -3)

[node name="Doomed" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_DOOMED)
(D_DOOMED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Doomed"]
texture = ExtResource("10_yn4y1")
centered = false
offset = Vector2(-1, -3)

[node name="Consecrate" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_CONSECRATED)
(D_CONSECRATED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Consecrate"]
texture = ExtResource("9_g8h0e")
centered = false
offset = Vector2(-1, -3)

[node name="Desecrate" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_DESECRATED)
(D_DESECRATED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Desecrate"]
texture = ExtResource("11_s01xa")
centered = false
offset = Vector2(-1, -3)

[node name="Bless" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_BLESSED)
(D_BLESSED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Bless"]
texture = ExtResource("25_7omfm")
centered = false
offset = Vector2(-1, -3)

[node name="Curse" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_CURSED)
(D_CURSED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Curse"]
texture = ExtResource("26_o0xd6")
centered = false
offset = Vector2(-1, -3)

[node name="Lucky" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_LUCKY)
(D_LUCKY)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Lucky"]
texture = ExtResource("27_ndnpt")
centered = false
offset = Vector2(-1, -3)

[node name="SlightlyLucky" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_SLIGHTLY_LUCKY)
(D_SLIGHTLY_LUCKY)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/SlightlyLucky"]
texture = ExtResource("29_86ey5")
centered = false
offset = Vector2(-1, -3)

[node name="QuiteLucky" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_QUITE_LUCKY)
(D_QUITE_LUCKY)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/QuiteLucky"]
texture = ExtResource("30_wdoi3")
centered = false
offset = Vector2(-1, -3)

[node name="IncrediblyLucky" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_INCREDIBLY_LUCKY)
(D_INCREDIBLY_LUCKY)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/IncrediblyLucky"]
texture = ExtResource("31_8habo")
centered = false
offset = Vector2(-1, -3)

[node name="Unlucky" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_UNLUCKY)
(D_UNLUCKY)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Unlucky"]
texture = ExtResource("28_3niai")
centered = false
offset = Vector2(-1, -3)

[node name="Freeze" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_FROZEN)
(D_FROZEN)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Freeze"]
texture = ExtResource("29_87noc")
centered = false
offset = Vector2(-1, -3)

[node name="Ignite" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_IGNITED)
(D_IGNITED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Ignite"]
texture = ExtResource("30_s7nly")
centered = false
offset = Vector2(-1, -3)

[node name="Charge" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_CHARGED)
(D_CHARGED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Charge"]
texture = ExtResource("21_ro1pk")
centered = false
offset = Vector2(-1, -3)

[node name="Supercharge" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_SUPERCHARGED)
(D_SUPERCHARGED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Supercharge"]
texture = ExtResource("31_efx5d")
centered = false
offset = Vector2(-1, -3)

[node name="Bury" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_BURIED)
(D_BURIED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Bury"]
texture = ExtResource("23_noblv")
centered = false
offset = Vector2(-1, -3)

[node name="Fleeting" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_FLEETING)
(D_FLEETING)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Fleeting"]
texture = ExtResource("24_qp57l")
centered = false
offset = Vector2(-1, -3)

[node name="Primed" type="Control" parent="Sprite/StatusBar"]
visible = false
custom_minimum_size = Vector2(8, 8)
layout_mode = 2
script = ExtResource("23_u3o1j")
_tooltip = "(S_PRIMED)
(D_PRIMED)"

[node name="Sprite2D" type="Sprite2D" parent="Sprite/StatusBar/Primed"]
texture = ExtResource("25_xu6eb")
centered = false
offset = Vector2(-1, -3)

[node name="NextFlipIndicator" type="AnimatedSprite2D" parent="Sprite"]
material = SubResource("ShaderMaterial_kikpk")
position = Vector2(23, 21)
sprite_frames = SubResource("SpriteFrames_cpm7a")
animation = &"heads"
centered = false
script = ExtResource("35_2vs3w")

[node name="PowerIconGrowPoint" type="Node2D" parent="Sprite"]
position = Vector2(17, 17)

[node name="StatusIconShrinkPoint" type="Node2D" parent="Sprite"]
position = Vector2(17, -7)

[node name="LabelAnchor" type="Node2D" parent="Sprite"]
position = Vector2(17, 6)

[node name="TooltipAnchor" type="Node2D" parent="Sprite"]
position = Vector2(17, 16)

[node name="Mouse" parent="." node_paths=PackedStringArray("watched") instance=ExtResource("18_x8c4t")]
watched = NodePath("../Clickbox")

[connection signal="clicked" from="Mouse" to="." method="_on_mouse_clicked"]
[connection signal="mouse_entered" from="Mouse" to="." method="_on_mouse_entered"]
[connection signal="mouse_exited" from="Mouse" to="." method="_on_mouse_exited"]
